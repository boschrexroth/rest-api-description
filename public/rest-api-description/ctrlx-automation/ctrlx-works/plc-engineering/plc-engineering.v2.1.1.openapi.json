{
  "openapi" : "3.0.2",
  "info" : {
    "contact" : {
      "email" : "support@boschrexroth.com",
      "name" : "Bosch Rexroth Support",
      "url" : "https://www.boschrexroth.com"
    },
    "description" : "The ctrlX WORKS PLC Engineering API is used to generate and edit ctrlX CORE PLC projects that are used in automatic commissioning.",
    "title" : "ctrlX WORKS - PLC Engineering API",
    "version" : "2.1.1"
  },
  "servers" : [ {
    "description" : "processes the REST calls",
    "url" : "http://localhost:{port}/plc/engineering/api/v2",
    "variables" : {
      "port" : {
        "default" : "##port##",
        "description" : "webserver port number"
      }
    }
  } ],
  "tags" : [ {
    "description" : "This is the Devices view. Here you organize elements for the special devices of the current project.",
    "name" : "Devices"
  }, {
    "description" : "Jobs are used to execute and check long running operations such as project open, close.",
    "name" : "Jobs"
  }, {
    "description" : "This is the POUs view. Here you organize general elements of the current project.",
    "name" : "POUs"
  }, {
    "description" : "To get detailed version information of the installed product.",
    "name" : "Product"
  }, {
    "description" : "Here you have general commands for projects.",
    "name" : "Project"
  }, {
    "description" : "This path handles the recipes in the current project.",
    "name" : "Recipes"
  }, {
    "description" : "Here you can read and edit the library repository.",
    "name" : "Repositories"
  }, {
    "description" : "Here you can read and select public symbol variables that will be exported.",
    "name" : "Symbol Configuration"
  }, {
    "description" : "Here you can read and edit the task configuration and task.",
    "name" : "Task Configuration"
  } ],
  "paths" : {
    "/library-repositories" : {
      "get" : {
        "operationId" : "getLibraryRepositories",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RepositoryList"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the available library repositories\n",
        "tags" : [ "Repositories" ]
      }
    },
    "/library-repositories/{repositoryName}" : {
      "get" : {
        "operationId" : "getLibraryRepositoryByName",
        "parameters" : [ {
          "description" : "Examples: System\n",
          "explode" : false,
          "in" : "path",
          "name" : "repositoryName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Examples:\n\nExample URL to get all installed libraries: .../repositories/libraries \n\nExample URL to get installed libraries matching string \"Standard\": .../repositories/libraries/?find=\"Standard\"\n",
          "explode" : true,
          "in" : "query",
          "name" : "find",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LibraryList"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the libraries installed in the library repository {repositoryName}\n- without query parameter: all libraries installed in the library repository\n- with query parameter: the libraries installed in the library repository matching the query\n",
        "tags" : [ "Repositories" ]
      },
      "post" : {
        "operationId" : "addLibraryRepositoryByName",
        "parameters" : [ {
          "description" : "Examples: System\n",
          "explode" : false,
          "in" : "path",
          "name" : "repositoryName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Path"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to install a library to the library repository {repositoryName}\n",
        "tags" : [ "Repositories" ]
      }
    },
    "/library-repositories/{repositoryName}/{libraryDisplayName}" : {
      "delete" : {
        "operationId" : "deleteLibraryRepositoryByName",
        "parameters" : [ {
          "description" : "Examples: System\n",
          "explode" : false,
          "in" : "path",
          "name" : "repositoryName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Displayname of the library to uninstall. Must be given with installed version!\nExample:\n   MyTest, 1.0.0.0 (Testcompany)\n",
          "explode" : false,
          "in" : "path",
          "name" : "libraryDisplayName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to uninstall the library {libraryDisplayName} from the library repository {repositoryName}\n",
        "tags" : [ "Repositories" ]
      }
    },
    "/jobs" : {
      "get" : {
        "operationId" : "getJobs",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobList"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get all jobs",
        "tags" : [ "Jobs" ]
      },
      "post" : {
        "operationId" : "addJobs",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "importFieldbusConfigJob" : {
                  "$ref" : "#/components/examples/importFieldbusConfigJobRequest"
                },
                "importOfflineFieldbusConfigJob" : {
                  "$ref" : "#/components/examples/importOfflineFieldbusConfigJobRequest"
                },
                "preCompileJobDisable" : {
                  "$ref" : "#/components/examples/preCompileJobDisableRequest"
                },
                "preCompileJobEnable" : {
                  "$ref" : "#/components/examples/preCompileJobEnableRequest"
                },
                "projectJobOpen" : {
                  "$ref" : "#/components/examples/projectJobOpenRequest"
                },
                "projectJobClose" : {
                  "$ref" : "#/components/examples/projectJobCloseRequest"
                },
                "projectJobSave" : {
                  "$ref" : "#/components/examples/projectJobSaveRequest"
                },
                "projectJobSaveAs" : {
                  "$ref" : "#/components/examples/projectJobSaveAsRequest"
                },
                "exportPlcOpenXmlJob" : {
                  "$ref" : "#/components/examples/exportPlcOpenXmlJobRequest"
                },
                "importPlcOpenXmlJob" : {
                  "$ref" : "#/components/examples/importPlcOpenXmlJobRequest"
                },
                "moveElementsJob" : {
                  "$ref" : "#/components/examples/moveElementsJobRequest"
                },
                "findElementsJob" : {
                  "$ref" : "#/components/examples/findElementsJobRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Jobs"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Jobs"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to create a new job",
        "tags" : [ "Jobs" ]
      }
    },
    "/jobs/{jobId}" : {
      "get" : {
        "operationId" : "getJobsById",
        "parameters" : [ {
          "description" : "job id",
          "explode" : false,
          "in" : "path",
          "name" : "jobId",
          "required" : true,
          "schema" : {
            "example" : "123",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "importFieldbusConfigJob" : {
                    "$ref" : "#/components/examples/importFieldbusConfigJobResponse"
                  },
                  "importOfflineFieldbusConfigJob" : {
                    "$ref" : "#/components/examples/importOfflineFieldbusConfigJobResponse"
                  },
                  "preCompileJobDisable" : {
                    "$ref" : "#/components/examples/preCompileJobDisableResponse"
                  },
                  "preCompileJobEnable" : {
                    "$ref" : "#/components/examples/preCompileJobEnableResponse"
                  },
                  "projectJobOpen" : {
                    "$ref" : "#/components/examples/projectJobOpenResponse"
                  },
                  "projectJobClose" : {
                    "$ref" : "#/components/examples/projectJobCloseResponse"
                  },
                  "projectJobSave" : {
                    "$ref" : "#/components/examples/projectJobSaveResponse"
                  },
                  "projectJobSaveAs" : {
                    "$ref" : "#/components/examples/projectJobSaveAsResponse"
                  },
                  "exportPlcOpenXmlJob" : {
                    "$ref" : "#/components/examples/exportPlcOpenXmlJobResponse"
                  },
                  "importPlcOpenXmlJob" : {
                    "$ref" : "#/components/examples/importPlcOpenXmlJobResponse"
                  },
                  "moveElementsJob" : {
                    "$ref" : "#/components/examples/moveElementsJobResponse"
                  },
                  "findElementsJob" : {
                    "$ref" : "#/components/examples/findElementsJobResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Jobs"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get information of an existing job",
        "tags" : [ "Jobs" ]
      }
    },
    "/product/info" : {
      "get" : {
        "operationId" : "getProductInfo",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the product information",
        "tags" : [ "Product" ]
      }
    },
    "/projects/current" : {
      "get" : {
        "operationId" : "getCurrentProject",
        "parameters" : [ {
          "description" : "kind of data of the current project",
          "explode" : true,
          "in" : "query",
          "name" : "option",
          "required" : false,
          "schema" : {
            "default" : "meta",
            "enum" : [ "meta", "extended" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the meta information or a list of elements of the current project",
        "tags" : [ "Project" ]
      }
    },
    "/pous" : {
      "get" : {
        "operationId" : "getPous",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PousTopLevel"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the root element of the POUs view",
        "tags" : [ "POUs" ]
      },
      "post" : {
        "operationId" : "addPous",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "dut" : {
                  "$ref" : "#/components/examples/dutRequest"
                },
                "folder" : {
                  "$ref" : "#/components/examples/folderRequest"
                },
                "gvl" : {
                  "$ref" : "#/components/examples/gvlRequest"
                },
                "pou" : {
                  "$ref" : "#/components/examples/pouRequest"
                },
                "libraryManager" : {
                  "$ref" : "#/components/examples/libraryManagerRequest"
                },
                "projectInfo" : {
                  "$ref" : "#/components/examples/projectInfoRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/PousRootElements"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "dut" : {
                    "$ref" : "#/components/examples/dutResponse"
                  },
                  "folder" : {
                    "$ref" : "#/components/examples/folderResponse"
                  },
                  "gvl" : {
                    "$ref" : "#/components/examples/gvlResponse"
                  },
                  "pou" : {
                    "$ref" : "#/components/examples/pouResponse"
                  },
                  "libraryManager" : {
                    "$ref" : "#/components/examples/libraryManagerResponse"
                  },
                  "projectInfo" : {
                    "$ref" : "#/components/examples/projectInfoResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/PousRootElements"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to create a new element and append it to the root element of the POUs view",
        "tags" : [ "POUs" ]
      }
    },
    "/pous/{path}" : {
      "delete" : {
        "operationId" : "deletePousByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to delete an existing element with all sub-elements",
        "tags" : [ "POUs" ]
      },
      "get" : {
        "operationId" : "getPousByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "dut" : {
                    "$ref" : "#/components/examples/dutResponse"
                  },
                  "folder" : {
                    "$ref" : "#/components/examples/folderResponse"
                  },
                  "gvl" : {
                    "$ref" : "#/components/examples/gvlResponse"
                  },
                  "pou" : {
                    "$ref" : "#/components/examples/pouResponse"
                  },
                  "libraryManager" : {
                    "$ref" : "#/components/examples/libraryManagerResponse"
                  },
                  "projectSettings" : {
                    "$ref" : "#/components/examples/projectSettingsResponse"
                  },
                  "projectInfo" : {
                    "$ref" : "#/components/examples/projectInfoResponse"
                  },
                  "action" : {
                    "$ref" : "#/components/examples/actionResponse"
                  },
                  "pouMethod" : {
                    "$ref" : "#/components/examples/pouMethodResponse"
                  },
                  "pouProperty" : {
                    "$ref" : "#/components/examples/pouPropertyResponse"
                  },
                  "pouPropertyGet" : {
                    "$ref" : "#/components/examples/pouPropertyGetResponse"
                  },
                  "pouPropertySet" : {
                    "$ref" : "#/components/examples/pouPropertySetResponse"
                  },
                  "sfcEditor" : {
                    "$ref" : "#/components/examples/sfcEditorResponse"
                  },
                  "compileOptionsEditor" : {
                    "$ref" : "#/components/examples/compileOptionsEditorResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/PousElements"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get an existing element",
        "tags" : [ "POUs" ]
      },
      "post" : {
        "operationId" : "addPousByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "dut" : {
                  "$ref" : "#/components/examples/dutRequest"
                },
                "folder" : {
                  "$ref" : "#/components/examples/folderRequest"
                },
                "gvl" : {
                  "$ref" : "#/components/examples/gvlRequest"
                },
                "pou" : {
                  "$ref" : "#/components/examples/pouRequest"
                },
                "libraryManager" : {
                  "$ref" : "#/components/examples/libraryManagerRequest"
                },
                "addLibrary" : {
                  "$ref" : "#/components/examples/addLibraryRequest"
                },
                "action" : {
                  "$ref" : "#/components/examples/actionRequest"
                },
                "pouMethod" : {
                  "$ref" : "#/components/examples/pouMethodRequest"
                },
                "pouProperty" : {
                  "$ref" : "#/components/examples/pouPropertyRequest"
                },
                "pouPropertyGet" : {
                  "$ref" : "#/components/examples/pouPropertyGetRequest"
                },
                "pouPropertySet" : {
                  "$ref" : "#/components/examples/pouPropertySetRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/PousElements"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "dut" : {
                    "$ref" : "#/components/examples/dutResponse"
                  },
                  "folder" : {
                    "$ref" : "#/components/examples/folderResponse"
                  },
                  "gvl" : {
                    "$ref" : "#/components/examples/gvlResponse"
                  },
                  "pou" : {
                    "$ref" : "#/components/examples/pouResponse"
                  },
                  "libraryManager" : {
                    "$ref" : "#/components/examples/libraryManagerResponse"
                  },
                  "addLibrary" : {
                    "$ref" : "#/components/examples/addLibraryResponse"
                  },
                  "action" : {
                    "$ref" : "#/components/examples/actionResponse"
                  },
                  "pouMethod" : {
                    "$ref" : "#/components/examples/pouMethodResponse"
                  },
                  "pouProperty" : {
                    "$ref" : "#/components/examples/pouPropertyResponse"
                  },
                  "pouPropertyGet" : {
                    "$ref" : "#/components/examples/pouPropertyGetResponse"
                  },
                  "pouPropertySet" : {
                    "$ref" : "#/components/examples/pouPropertySetResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/PousElements"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to create a new element",
        "tags" : [ "POUs" ]
      },
      "put" : {
        "operationId" : "updatePousByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "dut" : {
                  "$ref" : "#/components/examples/dutRequest"
                },
                "folder" : {
                  "$ref" : "#/components/examples/folderRequest"
                },
                "gvl" : {
                  "$ref" : "#/components/examples/gvlRequest"
                },
                "pou" : {
                  "$ref" : "#/components/examples/pouRequest"
                },
                "libraryManager" : {
                  "$ref" : "#/components/examples/libraryManagerRequest"
                },
                "action" : {
                  "$ref" : "#/components/examples/actionRequest"
                },
                "projectInfo" : {
                  "$ref" : "#/components/examples/projectInfoRequest"
                },
                "pouMethod" : {
                  "$ref" : "#/components/examples/pouMethodRequest"
                },
                "pouProperty" : {
                  "$ref" : "#/components/examples/pouPropertyRequest"
                },
                "pouPropertyGet" : {
                  "$ref" : "#/components/examples/pouPropertyGetRequest"
                },
                "pouPropertySet" : {
                  "$ref" : "#/components/examples/pouPropertySetRequest"
                },
                "sfcEditor" : {
                  "$ref" : "#/components/examples/sfcEditorRequest"
                },
                "compileOptionsEditor" : {
                  "$ref" : "#/components/examples/compileOptionsEditorRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/PousElements"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "dut" : {
                    "$ref" : "#/components/examples/dutResponse"
                  },
                  "folder" : {
                    "$ref" : "#/components/examples/folderResponse"
                  },
                  "gvl" : {
                    "$ref" : "#/components/examples/gvlResponse"
                  },
                  "pou" : {
                    "$ref" : "#/components/examples/pouResponse"
                  },
                  "libraryManager" : {
                    "$ref" : "#/components/examples/libraryManagerResponse"
                  },
                  "action" : {
                    "$ref" : "#/components/examples/actionResponse"
                  },
                  "projectInfo" : {
                    "$ref" : "#/components/examples/projectInfoResponse"
                  },
                  "pouMethod" : {
                    "$ref" : "#/components/examples/pouMethodResponse"
                  },
                  "pouProperty" : {
                    "$ref" : "#/components/examples/pouPropertyResponse"
                  },
                  "pouPropertyGet" : {
                    "$ref" : "#/components/examples/pouPropertyGetResponse"
                  },
                  "pouPropertySet" : {
                    "$ref" : "#/components/examples/pouPropertySetResponse"
                  },
                  "sfcEditor" : {
                    "$ref" : "#/components/examples/sfcEditorResponse"
                  },
                  "compileOptionsEditor" : {
                    "$ref" : "#/components/examples/compileOptionsEditorResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/PousElements"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to modify an existing element",
        "tags" : [ "POUs" ]
      }
    },
    "/devices" : {
      "get" : {
        "operationId" : "getDevices",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DevicesTopLevel"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the root element of the Devices view",
        "tags" : [ "Devices" ]
      },
      "post" : {
        "operationId" : "addDevices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "device" : {
                  "$ref" : "#/components/examples/deviceRequest"
                },
                "folder" : {
                  "$ref" : "#/components/examples/folderRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/DevicesRootElements"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "device" : {
                    "$ref" : "#/components/examples/deviceResponse"
                  },
                  "folder" : {
                    "$ref" : "#/components/examples/folderResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/DevicesRootElements"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to create a new element and append it to the root element of the Devices view",
        "tags" : [ "Devices" ]
      }
    },
    "/devices/{path}" : {
      "delete" : {
        "operationId" : "deleteDevicesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to delete an existing element with all sub-elements",
        "tags" : [ "Devices" ]
      },
      "get" : {
        "operationId" : "getDevicesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "device" : {
                    "$ref" : "#/components/examples/deviceResponse"
                  },
                  "application" : {
                    "$ref" : "#/components/examples/applicationResponse"
                  },
                  "action" : {
                    "$ref" : "#/components/examples/actionResponse"
                  },
                  "dut" : {
                    "$ref" : "#/components/examples/dutResponse"
                  },
                  "folder" : {
                    "$ref" : "#/components/examples/folderResponse"
                  },
                  "gvl" : {
                    "$ref" : "#/components/examples/gvlResponse"
                  },
                  "nvlSender" : {
                    "$ref" : "#/components/examples/nvlSenderResponse"
                  },
                  "nvlReceiver" : {
                    "$ref" : "#/components/examples/nvlReceiverResponse"
                  },
                  "pou" : {
                    "$ref" : "#/components/examples/pouResponse"
                  },
                  "pouMethod" : {
                    "$ref" : "#/components/examples/pouMethodResponse"
                  },
                  "pouProperty" : {
                    "$ref" : "#/components/examples/pouPropertyResponse"
                  },
                  "pouPropertyGet" : {
                    "$ref" : "#/components/examples/pouPropertyGetResponse"
                  },
                  "pouPropertySet" : {
                    "$ref" : "#/components/examples/pouPropertySetResponse"
                  },
                  "libraryManager" : {
                    "$ref" : "#/components/examples/libraryManagerResponse"
                  },
                  "recipeManager" : {
                    "$ref" : "#/components/examples/recipeManagerResponse"
                  },
                  "recipeDefinition" : {
                    "$ref" : "#/components/examples/recipeDefinitionResponse"
                  },
                  "taskConfig" : {
                    "$ref" : "#/components/examples/taskConfigResponse"
                  },
                  "task" : {
                    "$ref" : "#/components/examples/taskResponse"
                  },
                  "symbolConfig" : {
                    "$ref" : "#/components/examples/symbolConfigResponse"
                  },
                  "persistentVars" : {
                    "$ref" : "#/components/examples/persistentVarsResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/DevicesElements"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get an existing element",
        "tags" : [ "Devices" ]
      },
      "patch" : {
        "operationId" : "modifyDevicesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/merge-patch+json" : {
              "examples" : {
                "libraryParameter" : {
                  "$ref" : "#/components/examples/libraryParameterPatchRequest"
                },
                "disableDevice" : {
                  "$ref" : "#/components/examples/disableDevicePatchRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/DevicePatchElements"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/merge-patch+json" : {
                "examples" : {
                  "libraryParameter" : {
                    "$ref" : "#/components/examples/libraryParameterPatchResponse"
                  },
                  "disableDevice" : {
                    "$ref" : "#/components/examples/deviceResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/DevicePatchResponseElements"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to modify an resourse of an existing element",
        "tags" : [ "Devices" ]
      },
      "post" : {
        "operationId" : "addDevicesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "device" : {
                  "$ref" : "#/components/examples/deviceRequest"
                },
                "application" : {
                  "$ref" : "#/components/examples/applicationRequest"
                },
                "action" : {
                  "$ref" : "#/components/examples/actionRequest"
                },
                "dut" : {
                  "$ref" : "#/components/examples/dutRequest"
                },
                "folder" : {
                  "$ref" : "#/components/examples/folderRequest"
                },
                "gvl" : {
                  "$ref" : "#/components/examples/gvlRequest"
                },
                "nvlSender" : {
                  "$ref" : "#/components/examples/nvlSenderRequest"
                },
                "nvlReceiver" : {
                  "$ref" : "#/components/examples/nvlReceiverRequest"
                },
                "pou" : {
                  "$ref" : "#/components/examples/pouRequest"
                },
                "pouMethod" : {
                  "$ref" : "#/components/examples/pouMethodRequest"
                },
                "pouProperty" : {
                  "$ref" : "#/components/examples/pouPropertyRequest"
                },
                "pouPropertyGet" : {
                  "$ref" : "#/components/examples/pouPropertyGetRequest"
                },
                "pouPropertySet" : {
                  "$ref" : "#/components/examples/pouPropertySetRequest"
                },
                "libraryManager" : {
                  "$ref" : "#/components/examples/libraryManagerRequest"
                },
                "addLibrary" : {
                  "$ref" : "#/components/examples/addLibraryRequest"
                },
                "recipeManager" : {
                  "$ref" : "#/components/examples/recipeManagerRequest"
                },
                "recipeDefinition" : {
                  "$ref" : "#/components/examples/recipeDefinitionRequest"
                },
                "taskConfig" : {
                  "$ref" : "#/components/examples/taskConfigRequest"
                },
                "task" : {
                  "$ref" : "#/components/examples/taskRequest"
                },
                "symbolConfig" : {
                  "$ref" : "#/components/examples/symbolConfigRequest"
                },
                "persistentVars" : {
                  "$ref" : "#/components/examples/persistentVarsRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/DevicesElements"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "device" : {
                    "$ref" : "#/components/examples/deviceResponse"
                  },
                  "application" : {
                    "$ref" : "#/components/examples/applicationResponse"
                  },
                  "action" : {
                    "$ref" : "#/components/examples/actionResponse"
                  },
                  "dut" : {
                    "$ref" : "#/components/examples/dutResponse"
                  },
                  "folder" : {
                    "$ref" : "#/components/examples/folderResponse"
                  },
                  "gvl" : {
                    "$ref" : "#/components/examples/gvlResponse"
                  },
                  "nvlSender" : {
                    "$ref" : "#/components/examples/nvlSenderResponse"
                  },
                  "nvlReceiver" : {
                    "$ref" : "#/components/examples/nvlReceiverResponse"
                  },
                  "pou" : {
                    "$ref" : "#/components/examples/pouResponse"
                  },
                  "pouMethod" : {
                    "$ref" : "#/components/examples/pouMethodResponse"
                  },
                  "pouProperty" : {
                    "$ref" : "#/components/examples/pouPropertyResponse"
                  },
                  "pouPropertyGet" : {
                    "$ref" : "#/components/examples/pouPropertyGetResponse"
                  },
                  "pouPropertySet" : {
                    "$ref" : "#/components/examples/pouPropertySetResponse"
                  },
                  "libraryManager" : {
                    "$ref" : "#/components/examples/libraryManagerResponse"
                  },
                  "addLibrary" : {
                    "$ref" : "#/components/examples/addLibraryResponse"
                  },
                  "recipeManager" : {
                    "$ref" : "#/components/examples/recipeManagerResponse"
                  },
                  "recipeDefinition" : {
                    "$ref" : "#/components/examples/recipeDefinitionResponse"
                  },
                  "taskConfig" : {
                    "$ref" : "#/components/examples/taskConfigResponse"
                  },
                  "task" : {
                    "$ref" : "#/components/examples/taskResponse"
                  },
                  "symbolConfig" : {
                    "$ref" : "#/components/examples/symbolConfigResponse"
                  },
                  "persistentVars" : {
                    "$ref" : "#/components/examples/persistentVarsResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/DevicesElements"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to create a new element",
        "tags" : [ "Devices" ]
      },
      "put" : {
        "operationId" : "updateDevicesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "device" : {
                  "$ref" : "#/components/examples/deviceRequest"
                },
                "application" : {
                  "$ref" : "#/components/examples/applicationRequest"
                },
                "action" : {
                  "$ref" : "#/components/examples/actionRequest"
                },
                "dut" : {
                  "$ref" : "#/components/examples/dutRequest"
                },
                "folder" : {
                  "$ref" : "#/components/examples/folderRequest"
                },
                "gvl" : {
                  "$ref" : "#/components/examples/gvlRequest"
                },
                "nvlSender" : {
                  "$ref" : "#/components/examples/nvlSenderRequest"
                },
                "nvlReceiver" : {
                  "$ref" : "#/components/examples/nvlReceiverRequest"
                },
                "pou" : {
                  "$ref" : "#/components/examples/pouRequest"
                },
                "pouMethod" : {
                  "$ref" : "#/components/examples/pouMethodRequest"
                },
                "pouProperty" : {
                  "$ref" : "#/components/examples/pouPropertyRequest"
                },
                "pouPropertyGet" : {
                  "$ref" : "#/components/examples/pouPropertyGetRequest"
                },
                "pouPropertySet" : {
                  "$ref" : "#/components/examples/pouPropertySetRequest"
                },
                "libraryManager" : {
                  "$ref" : "#/components/examples/libraryManagerRequest"
                },
                "recipeManager" : {
                  "$ref" : "#/components/examples/recipeManagerRequest"
                },
                "recipeDefinition" : {
                  "$ref" : "#/components/examples/recipeDefinitionRequest"
                },
                "taskConfig" : {
                  "$ref" : "#/components/examples/taskConfigRequest"
                },
                "task" : {
                  "$ref" : "#/components/examples/taskRequest"
                },
                "symbolConfig" : {
                  "$ref" : "#/components/examples/symbolConfigRequest"
                },
                "persistentVars" : {
                  "$ref" : "#/components/examples/persistentVarsRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/DevicesElements"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "device" : {
                    "$ref" : "#/components/examples/deviceResponse"
                  },
                  "application" : {
                    "$ref" : "#/components/examples/applicationResponse"
                  },
                  "action" : {
                    "$ref" : "#/components/examples/actionResponse"
                  },
                  "dut" : {
                    "$ref" : "#/components/examples/dutResponse"
                  },
                  "folder" : {
                    "$ref" : "#/components/examples/folderResponse"
                  },
                  "gvl" : {
                    "$ref" : "#/components/examples/gvlResponse"
                  },
                  "nvlSender" : {
                    "$ref" : "#/components/examples/nvlSenderResponse"
                  },
                  "nvlReceiver" : {
                    "$ref" : "#/components/examples/nvlReceiverResponse"
                  },
                  "pou" : {
                    "$ref" : "#/components/examples/pouResponse"
                  },
                  "pouMethod" : {
                    "$ref" : "#/components/examples/pouMethodResponse"
                  },
                  "pouProperty" : {
                    "$ref" : "#/components/examples/pouPropertyResponse"
                  },
                  "pouPropertyGet" : {
                    "$ref" : "#/components/examples/pouPropertyGetResponse"
                  },
                  "pouPropertySet" : {
                    "$ref" : "#/components/examples/pouPropertySetResponse"
                  },
                  "libraryManager" : {
                    "$ref" : "#/components/examples/libraryManagerResponse"
                  },
                  "recipeManager" : {
                    "$ref" : "#/components/examples/recipeManagerResponse"
                  },
                  "recipeDefinition" : {
                    "$ref" : "#/components/examples/recipeDefinitionResponse"
                  },
                  "taskConfig" : {
                    "$ref" : "#/components/examples/taskConfigResponse"
                  },
                  "task" : {
                    "$ref" : "#/components/examples/taskResponse"
                  },
                  "symbolConfig" : {
                    "$ref" : "#/components/examples/symbolConfigResponse"
                  },
                  "persistentVars" : {
                    "$ref" : "#/components/examples/persistentVarsResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/DevicesElements"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to modify an existing element",
        "tags" : [ "Devices" ]
      }
    },
    "/devices/{path}/symbol-config" : {
      "delete" : {
        "operationId" : "deleteDevicesSymbolConfigByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to delete symbol configuration element",
        "tags" : [ "Symbol Configuration" ]
      },
      "get" : {
        "operationId" : "getDevicesSymbolConfigByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "If set to true, project symbols will be included in the response.",
          "example" : true,
          "explode" : true,
          "in" : "query",
          "name" : "showProjSymbols",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          },
          "style" : "form"
        }, {
          "description" : "If set to true, library symbols will be included in the response.",
          "example" : true,
          "explode" : true,
          "in" : "query",
          "name" : "showLibSymbols",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          },
          "style" : "form"
        }, {
          "description" : "If set to true, symbols exported via attribute will be included in the response.",
          "example" : true,
          "explode" : true,
          "in" : "query",
          "name" : "showExpAttrSymbols",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          },
          "style" : "form"
        }, {
          "description" : "If set to true, symbols with 'MaximalAccess == None' will be included in the response (CAUTION! this includes more symbol variables). Symbols with 'None' access is not shown in symbol configuration editor of ctrlX PLC Engineering.",
          "example" : false,
          "explode" : true,
          "in" : "query",
          "name" : "includeMaxAccessNone",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          },
          "style" : "form"
        }, {
          "description" : "If set to true, all structure types will be included in the response (CAUTION! this includes more types variable). These are not shown in symbol configuration editor of ctrlX PLC Engineering.",
          "example" : false,
          "explode" : true,
          "in" : "query",
          "name" : "includeAllTypes",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "symbolConfig" : {
                    "$ref" : "#/components/examples/symbolConfigResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/SymbolConfig"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get all symbol variables from project and libraries",
        "tags" : [ "Symbol Configuration" ]
      },
      "put" : {
        "operationId" : "updateDevicesSymbolConfigByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "- Use action **Select** and set **isSelected** property of variables inside 'symbols' and 'type' array to **true** to select the symbols.\n\n- Use action **UnSelect** and set **isSelected** property of variables inside 'symbols' and 'type' array to **false** to un select the symbols.\n\n- Use action **UnSelectAll** to clear all selections.\n\n- Use action **UpdateAll** to perform both **UnSelect** and **Select** in one API request.\n",
          "example" : "Select",
          "explode" : true,
          "in" : "query",
          "name" : "symbolsAction",
          "required" : false,
          "schema" : {
            "enum" : [ "Select", "UnSelect", "UnSelectAll", "UpdateAll" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "symbolConfig" : {
                  "$ref" : "#/components/examples/symbolConfigRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/SymbolConfig"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "symbolConfig" : {
                    "$ref" : "#/components/examples/symbolConfigResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/SymbolConfig"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to select symbol variables and update property of existing symbol configuration element",
        "tags" : [ "Symbol Configuration" ]
      }
    },
    "/devices/{path}/task-config" : {
      "delete" : {
        "operationId" : "deleteDevicesTaskConfigByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to delete task configuration element",
        "tags" : [ "Task Configuration" ]
      },
      "get" : {
        "operationId" : "getDevicesTaskConfigByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "taskConfig" : {
                    "$ref" : "#/components/examples/taskConfigResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/TaskConfig"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get task configuration properties",
        "tags" : [ "Task Configuration" ]
      },
      "put" : {
        "operationId" : "updateDevicesTaskConfigByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "- Use action **Add** to add a new task group. If no action is selected and 'taskGroups' exists in the request body, **Add** will be the default behaviour.\n\n- Use action **Remove** to remove a task group.\n",
          "example" : "Add",
          "explode" : true,
          "in" : "query",
          "name" : "taskGroupsAction",
          "required" : false,
          "schema" : {
            "enum" : [ "Add", "Remove" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "taskConfig" : {
                  "$ref" : "#/components/examples/taskConfigRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/TaskConfig"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "taskConfig" : {
                    "$ref" : "#/components/examples/taskConfigResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/TaskConfig"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to update properties and task groups of task configuration element",
        "tags" : [ "Task Configuration" ]
      }
    },
    "/devices/{path}/task-config/{taskName}" : {
      "delete" : {
        "operationId" : "deleteDevicesTaskByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Task name whch is added below 'Task Configuration'.",
          "example" : "Task",
          "explode" : false,
          "in" : "path",
          "name" : "taskName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to delete task element",
        "tags" : [ "Task Configuration" ]
      },
      "get" : {
        "operationId" : "getDevicesTaskByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Task name whch is added below 'Task Configuration'.",
          "example" : "Task",
          "explode" : false,
          "in" : "path",
          "name" : "taskName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "task" : {
                    "$ref" : "#/components/examples/taskResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get task properties",
        "tags" : [ "Task Configuration" ]
      },
      "put" : {
        "operationId" : "updateDevicesTaskByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "Task name whch is added below 'Task Configuration'.",
          "example" : "Task",
          "explode" : false,
          "in" : "path",
          "name" : "taskName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "task" : {
                  "$ref" : "#/components/examples/taskRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Task"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "task" : {
                    "$ref" : "#/components/examples/taskResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to update properties and configuration of task element",
        "tags" : [ "Task Configuration" ]
      }
    },
    "/devices/{path}/recipe-manager/{recipeDefinition}/variables" : {
      "delete" : {
        "operationId" : "deleteDevicesRecipeManagerVariablesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipe definition element.\n",
          "explode" : false,
          "in" : "path",
          "name" : "recipeDefinition",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to delete all recipe variable elements of the recipe definition element",
        "tags" : [ "Recipes" ]
      },
      "get" : {
        "operationId" : "getDevicesRecipeManagerVariablesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipe definition element.\n",
          "explode" : false,
          "in" : "path",
          "name" : "recipeDefinition",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecipeVariableList"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get all recipe variable elements of the recipe definition element",
        "tags" : [ "Recipes" ]
      },
      "post" : {
        "operationId" : "addDevicesRecipeManagerVariablesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipe definition element.\n",
          "explode" : false,
          "in" : "path",
          "name" : "recipeDefinition",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "recipeVariable" : {
                  "$ref" : "#/components/examples/recipeVariableRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/RecipeVariable"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "recipeVariable" : {
                    "$ref" : "#/components/examples/recipeVariableResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/RecipeVariable"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to create a new recipe variable element in the recipe definition element",
        "tags" : [ "Recipes" ]
      }
    },
    "/devices/{path}/recipe-manager/{recipeDefinition}/variables/{name}" : {
      "delete" : {
        "operationId" : "deleteDevicesRecipeManagerVariablesNameByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipeVariable or a recipe.\n",
          "explode" : false,
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipe definition element.\n",
          "explode" : false,
          "in" : "path",
          "name" : "recipeDefinition",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to delete recipe variable element {name} in the recipe definition element",
        "tags" : [ "Recipes" ]
      },
      "get" : {
        "operationId" : "getDevicesRecipeManagerVariablesNameByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipeVariable or a recipe.\n",
          "explode" : false,
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipe definition element.\n",
          "explode" : false,
          "in" : "path",
          "name" : "recipeDefinition",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "recipeVariable" : {
                    "$ref" : "#/components/examples/recipeVariableResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/RecipeVariable"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get recipe variable element {name} of recipe definition element",
        "tags" : [ "Recipes" ]
      },
      "put" : {
        "operationId" : "updateDevicesRecipeManagerVariablesNameByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipeVariable or a recipe.\n",
          "explode" : false,
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipe definition element.\n",
          "explode" : false,
          "in" : "path",
          "name" : "recipeDefinition",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "recipeVariable" : {
                  "$ref" : "#/components/examples/recipeVariableRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/RecipeVariable"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "recipeVariable" : {
                    "$ref" : "#/components/examples/recipeVariableResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/RecipeVariable"
                }
              }
            },
            "description" : "Ok"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to update the recipe variable element {name} in the recipe definition element",
        "tags" : [ "Recipes" ]
      }
    },
    "/devices/{path}/recipe-manager/{recipeDefinition}/recipes" : {
      "delete" : {
        "operationId" : "deleteDevicesRecipeManagerRecipesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipe definition element.\n",
          "explode" : false,
          "in" : "path",
          "name" : "recipeDefinition",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to delete all recipe elements in the recipe definition element",
        "tags" : [ "Recipes" ]
      },
      "get" : {
        "operationId" : "getDevicesRecipeManagerRecipesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipe definition element.\n",
          "explode" : false,
          "in" : "path",
          "name" : "recipeDefinition",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecipeList"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get all recipe elements of recipe definition element",
        "tags" : [ "Recipes" ]
      },
      "post" : {
        "operationId" : "addDevicesRecipeManagerRecipesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipe definition element.\n",
          "explode" : false,
          "in" : "path",
          "name" : "recipeDefinition",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "recipe" : {
                  "$ref" : "#/components/examples/recipeRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Recipe"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "recipe" : {
                    "$ref" : "#/components/examples/recipeResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Recipe"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to create a new recipe element in the recipe definition element",
        "tags" : [ "Recipes" ]
      }
    },
    "/devices/{path}/recipe-manager/{recipeDefinition}/recipes/{name}" : {
      "delete" : {
        "operationId" : "deleteDevicesRecipeManagerRecipesNameByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipeVariable or a recipe.\n",
          "explode" : false,
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipe definition element.\n",
          "explode" : false,
          "in" : "path",
          "name" : "recipeDefinition",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to delete the recipe element {name} in the recipe definition element",
        "tags" : [ "Recipes" ]
      },
      "get" : {
        "operationId" : "getDevicesRecipeManagerRecipesNameByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipeVariable or a recipe.\n",
          "explode" : false,
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipe definition element.\n",
          "explode" : false,
          "in" : "path",
          "name" : "recipeDefinition",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "recipe" : {
                    "$ref" : "#/components/examples/recipeResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Recipe"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the recipe element {name} of the recipe definition element",
        "tags" : [ "Recipes" ]
      },
      "put" : {
        "operationId" : "updateDevicesRecipeManagerRecipesNameByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipeVariable or a recipe.\n",
          "explode" : false,
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "This is the name of a recipe definition element.\n",
          "explode" : false,
          "in" : "path",
          "name" : "recipeDefinition",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "recipe" : {
                  "$ref" : "#/components/examples/recipeRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Recipe"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "recipe" : {
                    "$ref" : "#/components/examples/recipeResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Recipe"
                }
              }
            },
            "description" : "Ok"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to update the recipe element {name} in the recipe definition element",
        "tags" : [ "Recipes" ]
      }
    }
  },
  "components" : {
    "examples" : {
      "deviceRequest" : {
        "value" : {
          "name" : "CoreDevice",
          "elementType" : "Device",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "deviceInfo" : {
            "deviceType" : 4096,
            "id" : "1001 0080",
            "version" : "1.9.2.0"
          }
        }
      },
      "deviceResponse" : {
        "value" : {
          "name" : "CoreDevice",
          "elementType" : "Device",
          "children" : [ "Plc Logic", "Realtime_Data" ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "disable" : true,
          "deviceInfo" : {
            "name" : "ctrlX CORE",
            "vendor" : "Bosch Rexroth AG",
            "deviceType" : 4096,
            "id" : "1001 0080",
            "version" : "1.9.2.0",
            "orderNumber" : "dependent on customer specific configuration",
            "description" : "ctrlX CORE\r\nEing?nge: 8192\r\nAusg?nge: 8192\r\nMerker: 8192\r\nRemanenter Speicher: default 64KB auf 128KB konfigurierbar\r\n\t"
          }
        }
      },
      "folderRequest" : {
        "value" : {
          "name" : "MyFolder",
          "elementType" : "Folder",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          }
        }
      },
      "folderResponse" : {
        "value" : {
          "name" : "MyFolder",
          "elementType" : "Folder",
          "children" : [ "GVL_2" ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            },
            "documentation" : ""
          }
        }
      },
      "applicationRequest" : {
        "value" : {
          "name" : "Application1",
          "elementType" : "Application",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : "TestText"
            },
            "applicationBuildOptions" : {
              "downloadApplicationContent" : false
            },
            "bootApplication" : {
              "updateBootProjectAfterDownload" : true,
              "updateBootProjectAfterOnlineChange" : true,
              "remindBootApplicationOnClose" : true,
              "verifyBootApplicationAfterCreation" : true
            }
          }
        }
      },
      "applicationResponse" : {
        "value" : {
          "name" : "Application1",
          "elementType" : "Application",
          "children" : [ "library-manager" ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : "TestText"
            },
            "applicationBuildOptions" : {
              "downloadApplicationContent" : false
            },
            "bootApplication" : {
              "updateBootProjectAfterDownload" : true,
              "updateBootProjectAfterOnlineChange" : true,
              "remindBootApplicationOnClose" : true,
              "verifyBootApplicationAfterCreation" : true
            }
          }
        }
      },
      "actionRequest" : {
        "value" : {
          "name" : "ACT",
          "elementType" : "Action",
          "language" : "ST",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "implementation" : "i:=i+1;\nreturn;\n"
        }
      },
      "actionResponse" : {
        "value" : {
          "name" : "ACT",
          "elementType" : "Action",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "language" : "ST",
          "implementation" : "i:=i+1;\nreturn;\n"
        }
      },
      "dutRequest" : {
        "value" : {
          "name" : "Enum1",
          "elementType" : "DUT",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "declaration" : "{attribute 'qualified_only'}\n{attribute 'strict'}\nTYPE Enum1 :\n(\n\trot := 0,\n\tgelb :=1\n);\nEND_TYPE\n",
          "textlistsupport" : true
        }
      },
      "dutResponse" : {
        "value" : {
          "name" : "Enum1",
          "elementType" : "DUT",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "declaration" : "{attribute 'qualified_only'}\n{attribute 'strict'}\nTYPE Enum1 :\n(\n\trot := 0,\n\tgelb :=1\n);\nEND_TYPE\n",
          "textlistsupport" : true
        }
      },
      "gvlRequest" : {
        "value" : {
          "name" : "MyGVL",
          "elementType" : "GVL",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "declaration" : "{attribute 'qualified_only'}\nVAR_GLOBAL\nEND_VAR"
        }
      },
      "gvlResponse" : {
        "value" : {
          "name" : "MyGVL",
          "elementType" : "GVL",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "declaration" : "{attribute 'qualified_only'}\nVAR_GLOBAL\nEND_VAR"
        }
      },
      "plcLogicRequest" : {
        "value" : {
          "name" : "Plc Logic",
          "elementType" : "PLCLogic",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          }
        }
      },
      "plcLogicResponse" : {
        "value" : {
          "name" : "Plc Logic",
          "elementType" : "PLCLogic",
          "children" : [ "Application" ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          }
        }
      },
      "pouRequest" : {
        "value" : {
          "name" : "POU1",
          "elementType" : "POU",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "language" : "ST",
          "declaration" : "PROGRAM POU1\nVAR\nEND_VAR\n",
          "implementation" : "",
          "level" : "Standard"
        }
      },
      "pouResponse" : {
        "value" : {
          "name" : "POU1",
          "elementType" : "POU",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "language" : "ST",
          "declaration" : "PROGRAM POU1\nVAR\nEND_VAR\n",
          "implementation" : "",
          "level" : "Standard"
        }
      },
      "pouMethodRequest" : {
        "value" : {
          "name" : "METH",
          "elementType" : "POUMethod",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "language" : "ST",
          "declaration" : "",
          "implementation" : ""
        }
      },
      "pouMethodResponse" : {
        "value" : {
          "name" : "METH",
          "elementType" : "POUMethod",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "language" : "ST",
          "declaration" : "METHOD METH\nVAR_INPUT\nEND_VAR\n",
          "implementation" : ""
        }
      },
      "pouPropertyRequest" : {
        "value" : {
          "name" : "Prop",
          "elementType" : "POUProperty",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "language" : "ST",
          "declaration" : "PROPERTY POUFBProperty : bool\n"
        }
      },
      "pouPropertyResponse" : {
        "value" : {
          "name" : "Prop",
          "elementType" : "POUProperty",
          "children" : [ "Set", "Get" ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "language" : "ST",
          "declaration" : "PROPERTY POUFBProperty : bool\n"
        }
      },
      "pouPropertyGetRequest" : {
        "value" : {
          "name" : "Get",
          "elementType" : "POUPropertyGet",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "language" : "ST",
          "declaration" : "VAR\ni:INT;\nEND_VAR",
          "implementation" : "//This is the implementation"
        }
      },
      "pouPropertyGetResponse" : {
        "value" : {
          "name" : "Get",
          "elementType" : "POUPropertyGet",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "language" : "ST",
          "declaration" : "VAR\ni:INT;\nEND_VAR",
          "implementation" : "//This is the implementation"
        }
      },
      "pouPropertySetRequest" : {
        "value" : {
          "name" : "Set",
          "elementType" : "POUPropertySet",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "language" : "ST",
          "declaration" : "VAR\n   i:INT;\nEND_VAR",
          "implementation" : "//Implementation"
        }
      },
      "pouPropertySetResponse" : {
        "value" : {
          "name" : "Set",
          "elementType" : "POUPropertySet",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "language" : "ST",
          "declaration" : "VAR\n   i:INT;\nEND_VAR",
          "implementation" : "//Implementation"
        }
      },
      "libraryManagerRequest" : {
        "value" : {
          "name" : "Library Manager",
          "elementType" : "LibraryManager",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          }
        }
      },
      "libraryManagerResponse" : {
        "value" : {
          "name" : "Library Manager",
          "displayName" : "Library Manager",
          "elementType" : "LibraryManager",
          "children" : [ "IecVarAccess" ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          }
        }
      },
      "addLibraryRequest" : {
        "value" : {
          "name" : "_DEFAULT_CXA_Library_Template",
          "elementtype" : "Library",
          "version" : "1.0.0.0",
          "company" : "BoschRexroth",
          "placeholderName" : ""
        }
      },
      "addLibraryResponse" : {
        "value" : {
          "name" : "_DEFAULT_CXA_Library_Template",
          "elementType" : "Library",
          "id" : null,
          "children" : [ ],
          "elementProperties" : { },
          "version" : "1.0.0.0",
          "company" : "BoschRexroth",
          "placeholderName" : "",
          "displayName" : "_DEFAULT_CXA_Library_Template, 1.0.0.0 (BoschRexroth)",
          "effectiveVersion" : "1.0.0.0",
          "systemLibrary" : false,
          "description" : "Brief description of the Lib (max. 80 characters)",
          "resolutionInfo" : "",
          "parameters" : null
        }
      },
      "recipeManagerRequest" : {
        "value" : {
          "name" : "Recipe Manager",
          "elementType" : "RecipeManager",
          "displayName" : "Recipe Manager",
          "storageType" : "Binary",
          "fileExtension" : ".txtrecipe",
          "filePath" : "",
          "separator" : ":=",
          "columnList" : "0|1",
          "autoSaveRecipe" : true,
          "loadType" : "ExactVariableList",
          "writeType" : "LimitVariablesToMinMax",
          "checkRecipeForChanges" : false,
          "recipeManagementInPlc" : true
        }
      },
      "recipeManagerResponse" : {
        "value" : {
          "name" : "Recipe Manager",
          "elementType" : "RecipeManager",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "displayName" : "Recipe Manager",
          "storageType" : "Binary",
          "fileExtension" : ".txtrecipe",
          "filePath" : "",
          "separator" : ":=",
          "columnList" : "0|1",
          "autoSaveRecipe" : true,
          "loadType" : "ExactVariableList",
          "writeType" : "LimitVariablesToMinMax",
          "checkRecipeForChanges" : false,
          "recipeManagementInPlc" : true
        }
      },
      "recipeDefinitionRequest" : {
        "value" : {
          "name" : "RecipeDef",
          "elementType" : "RecipeDefinition",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          }
        }
      },
      "recipeDefinitionResponse" : {
        "value" : {
          "name" : "RecipeDef",
          "elementType" : "RecipeDefinition",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          }
        }
      },
      "taskConfigRequest" : {
        "value" : {
          "name" : "task-config",
          "elementType" : "TaskConfig",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "taskGroups" : [ {
            "groupName" : "TestGroup1",
            "core" : -1
          }, {
            "groupName" : "TestGroup2",
            "core" : 2
          } ]
        }
      },
      "taskConfigResponse" : {
        "value" : {
          "name" : "task-config",
          "elementType" : "TaskConfig",
          "children" : [ "Task" ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "displayName" : "Task Configuration",
          "taskGroups" : [ {
            "groupName" : "IEC-Tasks",
            "core" : -2
          }, {
            "groupName" : "TestGroup1",
            "core" : -1
          }, {
            "groupName" : "TestGroup2",
            "core" : 2
          } ]
        }
      },
      "taskRequest" : {
        "value" : {
          "name" : "MyTask",
          "elementType" : "Task",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "priority" : "29",
          "taskGroup" : "IEC-Tasks",
          "type" : {
            "name" : "external",
            "value" : "TASK_EXTERNAL_EVENT_05"
          },
          "watchdog" : {
            "enable" : true,
            "time" : "t#200ms",
            "sensitivity" : "8"
          },
          "pouCalls" : [ {
            "name" : "pou1",
            "comment" : "xyz"
          }, {
            "name" : "pou2",
            "comment" : "xyz"
          } ]
        }
      },
      "taskResponse" : {
        "value" : {
          "name" : "MyTask",
          "elementType" : "Task",
          "children" : [ "pou1.Unknown_TaskPOUCallObject", "pou2.Unknown_TaskPOUCallObject" ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "priority" : "29",
          "taskGroup" : "IEC-Tasks",
          "type" : {
            "name" : "external",
            "value" : "TASK_EXTERNAL_EVENT_05"
          },
          "watchdog" : {
            "enable" : true,
            "time" : "t#200ms",
            "sensitivity" : "8"
          },
          "pouCalls" : [ {
            "name" : "pou1",
            "comment" : "xyz"
          }, {
            "name" : "pou2",
            "comment" : "xyz"
          } ]
        }
      },
      "symbolConfigRequest" : {
        "value" : {
          "name" : "symbol-config",
          "elementType" : "SymbolConfig",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "includeCommentsInXML" : true,
          "supportOPCUA" : true,
          "optimizedLayout" : true,
          "symbols" : [ {
            "libraryNamespace" : "",
            "name" : "Constants",
            "isSelected" : true,
            "variables" : [ {
              "name" : "RuntimeVersion",
              "accessRights" : "Void",
              "maximalAccess" : "Read",
              "attribute" : "Void",
              "type" : "VERSION",
              "fullQualifiedBaseType" : "VERSION",
              "comment" : " the runtime version number as defined by the device description.",
              "variableType" : "Var",
              "isSelected" : false
            }, {
              "name" : "CompilerVersion",
              "accessRights" : "Void",
              "maximalAccess" : "Read",
              "attribute" : "Void",
              "type" : "VERSION",
              "fullQualifiedBaseType" : "VERSION",
              "comment" : " the compiler version as defined in the build options (not OEM Customized Version!)",
              "variableType" : "Var",
              "isSelected" : false
            } ]
          } ],
          "types" : [ {
            "libraryNamespace" : "",
            "name" : "VERSION",
            "isSelected" : true,
            "variables" : [ {
              "name" : "uiMajor",
              "accessRights" : "Void",
              "maximalAccess" : "ReadWrite",
              "attribute" : "Void",
              "type" : "UINT",
              "fullQualifiedBaseType" : null,
              "comment" : "",
              "variableType" : "Var",
              "isSelected" : false
            }, {
              "name" : "uiMinor",
              "accessRights" : "Void",
              "maximalAccess" : "ReadWrite",
              "attribute" : "Void",
              "type" : "UINT",
              "fullQualifiedBaseType" : null,
              "comment" : "",
              "variableType" : "Var",
              "isSelected" : false
            }, {
              "name" : "uiServicePack",
              "accessRights" : "Void",
              "maximalAccess" : "ReadWrite",
              "attribute" : "Void",
              "type" : "UINT",
              "fullQualifiedBaseType" : null,
              "comment" : "",
              "variableType" : "Var",
              "isSelected" : false
            }, {
              "name" : "uiPatch",
              "accessRights" : "Void",
              "maximalAccess" : "ReadWrite",
              "attribute" : "Void",
              "type" : "UINT",
              "fullQualifiedBaseType" : null,
              "comment" : "",
              "variableType" : "Var",
              "isSelected" : false
            } ]
          } ]
        }
      },
      "symbolConfigResponse" : {
        "value" : {
          "name" : "symbol-config",
          "elementType" : "SymbolConfig",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "displayName" : "Symbol Configuration",
          "includeCommentsInXML" : true,
          "supportOPCUA" : true,
          "optimizedLayout" : true,
          "symbols" : [ {
            "libraryNamespace" : "",
            "name" : "Constants",
            "isSelected" : true,
            "variables" : [ {
              "name" : "RuntimeVersion",
              "accessRights" : "Void",
              "maximalAccess" : "Read",
              "attribute" : "Void",
              "type" : "VERSION",
              "fullQualifiedBaseType" : "VERSION",
              "comment" : " the runtime version number as defined by the device description.",
              "variableType" : "Var",
              "isSelected" : false
            }, {
              "name" : "CompilerVersion",
              "accessRights" : "Void",
              "maximalAccess" : "Read",
              "attribute" : "Void",
              "type" : "VERSION",
              "fullQualifiedBaseType" : "VERSION",
              "comment" : " the compiler version as defined in the build options (not OEM Customized Version!)",
              "variableType" : "Var",
              "isSelected" : false
            } ]
          } ],
          "types" : [ {
            "libraryNamespace" : "",
            "name" : "VERSION",
            "isSelected" : true,
            "variables" : [ {
              "name" : "uiMajor",
              "accessRights" : "Void",
              "maximalAccess" : "ReadWrite",
              "attribute" : "Void",
              "type" : "UINT",
              "fullQualifiedBaseType" : null,
              "comment" : "",
              "variableType" : "Var",
              "isSelected" : false
            }, {
              "name" : "uiMinor",
              "accessRights" : "Void",
              "maximalAccess" : "ReadWrite",
              "attribute" : "Void",
              "type" : "UINT",
              "fullQualifiedBaseType" : null,
              "comment" : "",
              "variableType" : "Var",
              "isSelected" : false
            }, {
              "name" : "uiServicePack",
              "accessRights" : "Void",
              "maximalAccess" : "ReadWrite",
              "attribute" : "Void",
              "type" : "UINT",
              "fullQualifiedBaseType" : null,
              "comment" : "",
              "variableType" : "Var",
              "isSelected" : false
            }, {
              "name" : "uiPatch",
              "accessRights" : "Void",
              "maximalAccess" : "ReadWrite",
              "attribute" : "Void",
              "type" : "UINT",
              "fullQualifiedBaseType" : null,
              "comment" : "",
              "variableType" : "Var",
              "isSelected" : false
            } ]
          } ]
        }
      },
      "persistentVarsRequest" : {
        "value" : {
          "name" : "PersistentVars",
          "elementType" : "PersistentVars",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "declaration" : "{attribute 'qualified_only'}\nVAR_GLOBAL PERSISTENT RETAIN\nEND_VAR"
        }
      },
      "persistentVarsResponse" : {
        "value" : {
          "name" : "PersistentVars",
          "elementType" : "PersistentVars",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "declaration" : "{attribute 'qualified_only'}\nVAR_GLOBAL PERSISTENT RETAIN\nEND_VAR"
        }
      },
      "projectSettingsRequest" : {
        "value" : {
          "name" : "project-settings",
          "elementType" : "ProjectSettings"
        }
      },
      "projectSettingsResponse" : {
        "value" : {
          "name" : "project-settings",
          "displayName" : "Project Settings",
          "elementType" : "ProjectSettings",
          "children" : [ "Compile options", "Compiler warnings", "Library development", "Page Setup", "Security", "SFC", "Source Download", "Static Analysis Light", "Users and Groups", "Visualization", "Visualization Profile" ],
          "elementProperties" : { }
        }
      },
      "sfcEditorRequest" : {
        "value" : {
          "name" : "SFC",
          "elementType" : "SfcEditor",
          "flags" : [ {
            "name" : "SFCEnableLimit",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCInit",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCReset",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCQuitError",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCPause",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCError",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCTrans",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCErrorStep",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCErrorPOU",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCCurrentStep",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCTip",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCTipMode",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCErrorAnalyzation",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCErrorAnalyzationTable",
            "use" : true,
            "declare" : true
          } ],
          "build" : {
            "calcActiveTransOnly" : false
          },
          "applyToAll" : true
        }
      },
      "sfcEditorResponse" : {
        "value" : {
          "name" : "SFC",
          "elementType" : "SfcEditor",
          "flags" : [ {
            "name" : "SFCEnableLimit",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCInit",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCReset",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCQuitError",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCPause",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCError",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCTrans",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCErrorStep",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCErrorPOU",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCCurrentStep",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCTip",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCTipMode",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCErrorAnalyzation",
            "use" : true,
            "declare" : true
          }, {
            "name" : "SFCErrorAnalyzationTable",
            "use" : true,
            "declare" : true
          } ],
          "build" : {
            "calcActiveTransOnly" : false
          },
          "applyToAll" : true
        }
      },
      "recipeRequest" : {
        "value" : {
          "name" : "recipe1",
          "elementType" : "Recipe",
          "variables" : [ {
            "name" : "PLC_PRG.j",
            "value" : "1"
          } ]
        }
      },
      "recipeResponse" : {
        "value" : {
          "name" : "recipe1",
          "elementType" : "Recipe",
          "children" : [ ],
          "elementProperties" : { },
          "variables" : [ {
            "name" : "PLC_PRG.j",
            "value" : "1"
          } ]
        }
      },
      "recipeVariableRequest" : {
        "value" : {
          "name" : "PLC_PRG.i",
          "elementType" : "RecipeVariable",
          "additionalName" : "PLC_PRG.i",
          "comment" : "CommentIndex",
          "lowerBound" : "5",
          "upperBound" : "14",
          "recipes" : [ {
            "name" : "recipe1",
            "value" : "5"
          }, {
            "name" : "recipe2",
            "value" : "8"
          }, {
            "name" : "recipe3",
            "value" : "1"
          } ]
        }
      },
      "recipeVariableResponse" : {
        "value" : {
          "name" : "PLC_PRG.i",
          "elementType" : "RecipeVariable",
          "children" : [ ],
          "elementProperties" : { },
          "additionalName" : "PLC_PRG.i",
          "variableType" : "<Invalid Type>",
          "comment" : "CommentIndex",
          "lowerBound" : "5",
          "upperBound" : "14",
          "recipes" : [ {
            "name" : "recipe1",
            "value" : "5"
          }, {
            "name" : "recipe2",
            "value" : "8"
          }, {
            "name" : "recipe3",
            "value" : "1"
          } ]
        }
      },
      "importFieldbusConfigJobRequest" : {
        "value" : {
          "jobType" : "ImportFieldbusConfigJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/device/Realtime_Data",
            "username" : "username",
            "password" : "password",
            "busType" : "Ethercat",
            "forceInsert" : true
          }
        }
      },
      "importFieldbusConfigJobResponse" : {
        "value" : {
          "id" : "4277e217d3bbf9be",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ImportFieldbusConfigJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/device/Realtime_Data",
            "username" : "username",
            "password" : "password",
            "busType" : "Ethercat",
            "forceInsert" : true
          },
          "jobResultInfo" : "Existing 'Ethercat' elements successfully imported."
        }
      },
      "preCompileJobDisableRequest" : {
        "value" : {
          "jobType" : "PreCompileJob",
          "jobParameters" : {
            "action" : "Disable"
          }
        }
      },
      "preCompileJobDisableResponse" : {
        "value" : {
          "id" : "28fcdc4e05b4e310",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "PreCompileJob",
          "jobParameters" : {
            "action" : "Disable"
          },
          "jobResultInfo" : "PreCompile is disabled."
        }
      },
      "preCompileJobEnableRequest" : {
        "value" : {
          "jobType" : "PreCompileJob",
          "jobParameters" : {
            "action" : "Enable"
          }
        }
      },
      "preCompileJobEnableResponse" : {
        "value" : {
          "id" : "28fcdc4e05b4e377",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "PreCompileJob",
          "jobParameters" : {
            "action" : "Enable"
          },
          "jobResultInfo" : "PreCompile is enabled."
        }
      },
      "projectJobOpenRequest" : {
        "value" : {
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Open",
            "path" : "D:\\ctrlX\\PLCProjects\\OpenApiPLC.project"
          }
        }
      },
      "projectJobOpenResponse" : {
        "value" : {
          "id" : "ec0d3b1242aa54b0",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Open",
            "path" : "D:\\ctrlX\\PLCProjects\\OpenApiPLC.project"
          },
          "jobResultInfo" : "Project ' at D:\\ctrlX\\PLCProjects\\OpenApiPLC.project.' successfully opened."
        }
      },
      "projectJobCloseRequest" : {
        "value" : {
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Close"
          }
        }
      },
      "projectJobCloseResponse" : {
        "value" : {
          "id" : "28fcdc4e05b4e309",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Close"
          },
          "jobResultInfo" : "Project successfully closed."
        }
      },
      "projectJobSaveRequest" : {
        "value" : {
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Save"
          }
        }
      },
      "projectJobSaveResponse" : {
        "value" : {
          "id" : "d00d87074fa4219",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Save"
          },
          "jobResultInfo" : "Project successfully saved."
        }
      },
      "projectJobSaveAsRequest" : {
        "value" : {
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Save",
            "path" : "D:\\ctrlX\\PLCProjects\\jobs\\OpenApiPLC.project"
          }
        }
      },
      "projectJobSaveAsResponse" : {
        "value" : {
          "id" : "bfaf6c3d6a17d8e3",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Save",
            "path" : "D:\\ctrlX\\PLCProjects\\jobs\\OpenApiPLC.project"
          },
          "jobResultInfo" : "Project successfully saved at D:\\ctrlX\\PLCProjects\\jobs\\OpenApiPLC.project."
        }
      },
      "exportPlcOpenXmlJobRequest" : {
        "value" : {
          "jobType" : "ExportPlcOpenXmlJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/device/PLC Logic/Application/POU_SFC",
            "filePath" : "D:\\ctrlX\\PLCProjects\\PLCOpenExport",
            "fileName" : "POU_SFC.xml"
          }
        }
      },
      "exportPlcOpenXmlJobResponse" : {
        "value" : {
          "id" : "c23b4e5eb2d52a8",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ExportPlcOpenXmlJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/device/PLC Logic/Application/POU_SFC",
            "filePath" : "D:\\ctrlX\\PLCProjects\\PLCOpenExport",
            "fileName" : "POU_SFC.xml"
          },
          "jobResultInfo" : "File 'POU_SFC.xml'  successfully exported."
        }
      },
      "importPlcOpenXmlJobRequest" : {
        "value" : {
          "jobType" : "ImportPlcOpenXmlJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/device/PLC Logic/Application",
            "filePath" : "D:\\ctrlX\\PLCProjects\\PLCOpenExport",
            "fileName" : "POU_SFC.xml"
          }
        }
      },
      "importPlcOpenXmlJobResponse" : {
        "value" : {
          "id" : "7ca9ca288f272303",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ImportPlcOpenXmlJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/device/PLC Logic/Application",
            "filePath" : "D:\\ctrlX\\PLCProjects\\PLCOpenExport",
            "fileName" : "POU_SFC.xml"
          },
          "jobResultInfo" : "File 'POU_SFC.xml'  successfully Imported."
        }
      },
      "nvlSenderResponse" : {
        "value" : {
          "name" : "NVL_2",
          "elementType" : "GVL",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "declaration" : "{attribute 'qualified_only'}\nVAR_GLOBAL\nEND_VAR",
          "networkVariables" : {
            "networkType" : "UDP",
            "task" : "MainTask",
            "listIdentifier" : "1",
            "packVariables" : true,
            "transmitChecksum" : false,
            "acknowledgement" : false,
            "cyclicTransmission" : {
              "enable" : true,
              "interval" : "T#50ms"
            },
            "transmitOnChange" : {
              "enable" : false,
              "minimumGap" : "T#20ms"
            },
            "transmitOnEvent" : {
              "enable" : false,
              "variable" : ""
            },
            "settings" : {
              "enable" : true,
              "parameters" : [ {
                "name" : "Port",
                "value" : "1202"
              }, {
                "name" : "Broadcast Adr.",
                "value" : "255.255.255.255"
              } ]
            }
          }
        }
      },
      "nvlSenderRequest" : {
        "value" : {
          "name" : "NVL_2",
          "elementType" : "GVL",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "declaration" : "{attribute 'qualified_only'}\nVAR_GLOBAL\nEND_VAR",
          "networkVariables" : {
            "networkType" : "UDP",
            "task" : "MainTask",
            "listIdentifier" : "1",
            "packVariables" : true,
            "transmitChecksum" : false,
            "acknowledgement" : false,
            "cyclicTransmission" : {
              "enable" : true,
              "interval" : "T#50ms"
            },
            "transmitOnChange" : {
              "enable" : false,
              "minimumGap" : "T#20ms"
            },
            "transmitOnEvent" : {
              "enable" : false,
              "variable" : ""
            },
            "settings" : {
              "parameters" : [ {
                "name" : "Port",
                "value" : "1202"
              }, {
                "name" : "Broadcast Adr.",
                "value" : "255.255.255.255"
              } ]
            }
          }
        }
      },
      "nvlReceiverResponse" : {
        "value" : {
          "name" : "NVL_2",
          "elementType" : "NVLReceiver",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "declaration" : "//This gobal variable list is received via the network.\n//Sender: NVL [ctrlX_COREvirtual: PLC Logic: Application]\n//Protocol: UDP\n\n{attribute 'qualified_only'}\nVAR_GLOBAL PERSISTENT RETAIN\n\t\nEND_VAR\nVAR_GLOBAL\n\ta: INT;\nEND_VAR",
          "networkSettings" : {
            "task" : "MainTask",
            "sender" : "NVL [ctrlX_COREvirtual: PLC Logic: Application]",
            "importFromFile" : ""
          }
        }
      },
      "nvlReceiverRequest" : {
        "value" : {
          "name" : "NVL_2",
          "elementType" : "NVLReceiver",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "networkSettings" : {
            "task" : "MainTask",
            "sender" : "NVL [ctrlX_COREvirtual: PLC Logic: Application]",
            "importFromFile" : ""
          }
        }
      },
      "libraryParameterPatchRequest" : {
        "value" : {
          "parameters" : [ {
            "name" : "param1",
            "value" : "50"
          }, {
            "name" : "param2",
            "value" : "50"
          } ]
        }
      },
      "libraryParameterPatchResponse" : {
        "value" : {
          "name" : "ExampleLib",
          "elementType" : "Library",
          "children" : [ ],
          "elementProperties" : { },
          "version" : "1.0.0.0",
          "company" : "Rexroth",
          "placeholderName" : "",
          "displayName" : "ExampleLib, 1.0.0.0 (Rexroth)",
          "effectiveVersion" : "1.0.0.0",
          "systemLibrary" : false,
          "description" : "",
          "resolutionInfo" : "",
          "parameters" : [ {
            "name" : "param1",
            "value" : "50"
          }, {
            "name" : "param2",
            "value" : "50"
          } ]
        }
      },
      "projectInfoRequest" : {
        "value" : {
          "name" : "project-info",
          "elementtype" : "ProjectInfo",
          "properties" : {
            "title" : "_DEFAULT_CXA_Library_Template",
            "company" : "BoschRexroth",
            "version" : "1.2.3.4",
            "released" : true,
            "author" : "Newton",
            "placeholder" : "ADAPT_THIS_PLACEHOLDER_VALUE_OR_REMOVE_THE_KEY_COMPLETELY",
            "description" : "descrption",
            "defaultNamespace" : "Default ",
            "docFormat" : "reStructuredText",
            "libDocContent" : "CommentsAndDocs"
          }
        }
      },
      "projectInfoResponse" : {
        "value" : {
          "name" : "project-info",
          "displayName" : "Project Information",
          "elementType" : "ProjectInfo",
          "children" : [ ],
          "elementProperties" : { },
          "properties" : {
            "author" : "Newton",
            "company" : "BoschRexroth",
            "compiledLibraryCompatibilityVersion" : "ctrlX PLC 1.3.0",
            "defaultNamespace" : "Default namespace",
            "description" : "descrption",
            "docFormat" : "reStructuredText",
            "libDocContent" : "CommentsAndDocs",
            "placeholder" : "ADAPT_THIS_PLACEHOLDER_VALUE_OR_REMOVE_THE_KEY_COMPLETELY",
            "project" : "ApiTest",
            "released" : true,
            "title" : "_DEFAULT_CXA_Library_Template",
            "version" : "1.2.3.4"
          }
        }
      },
      "importOfflineFieldbusConfigJobRequest" : {
        "value" : {
          "jobType" : "ImportOfflineFieldbusConfigJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/device/Realtime_Data",
            "filePath" : "D:\\",
            "fileName" : "Ethercat.xml",
            "busType" : "Ethercat",
            "forceInsert" : true
          }
        }
      },
      "importOfflineFieldbusConfigJobResponse" : {
        "value" : {
          "id" : "66e24819dbfabb8e",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ImportOfflineFieldbusConfigJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/device/Realtime_Data",
            "filePath" : "D:\\",
            "fileName" : "Ethercat.xml",
            "busType" : "Ethercat",
            "forceInsert" : true
          },
          "jobResultInfo" : "Existing 'Ethercat' elements successfully imported."
        }
      },
      "compileOptionsEditorRequest" : {
        "value" : {
          "name" : "Compile options",
          "elementType" : "CompileOptionsEditor",
          "fixCompilerVersion" : "3.5.12.60",
          "settings" : {
            "allowUniCodeIdentifiers" : true,
            "replaceConstants" : true,
            "enableBreakpointLogging" : true
          },
          "maxCompilerWarnings" : "50"
        }
      },
      "compileOptionsEditorResponse" : {
        "value" : {
          "name" : "Compile options",
          "elementType" : "CompileOptionsEditor",
          "children" : [ ],
          "elementProperties" : { },
          "fixCompilerVersion" : "3.5.17.0",
          "settings" : {
            "allowUniCodeIdentifiers" : true,
            "replaceConstants" : true,
            "enableBreakpointLogging" : true
          },
          "maxCompilerWarnings" : "<no limit>"
        }
      },
      "moveElementsJobRequest" : {
        "value" : {
          "jobType" : "MoveElementsJob",
          "jobParameters" : {
            "sourceNodeUrl" : "devices/device/PLC Logic/Application/Folder1",
            "destinationNodeUrl" : "devices/device/PLC Logic/Application/Folder2"
          }
        }
      },
      "moveElementsJobResponse" : {
        "value" : {
          "id" : "31a43fb7ad83edf3",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "MoveElementsJob",
          "jobParameters" : {
            "sourceNodeUrl" : "devices/device/PLC Logic/Application/Folder1",
            "destinationNodeUrl" : "devices/device/PLC Logic/Application/Folder2"
          },
          "jobResultInfo" : "Elements moved successfully."
        }
      },
      "findElementsJobRequest" : {
        "value" : {
          "jobType" : "FindElementsJob",
          "jobParameters" : {
            "nodeUrl" : "devices/Device/PLC Logic/Application",
            "findText" : "folder",
            "findId" : "0ac0a639-1834-4e05-af0b-929ab7b95ab7",
            "matchCase" : false,
            "matchWholeWord" : false,
            "searchOptions" : "NodeAndSubNodes"
          }
        }
      },
      "findElementsJobResponse" : {
        "value" : {
          "id" : "7e4f477cf07cd0b1",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "FindElementsJob",
          "jobParameters" : {
            "nodeUrl" : "devices/Device/PLC Logic/Application",
            "findText" : "folder",
            "findId" : "0ac0a639-1834-4e05-af0b-929ab7b95ab7",
            "matchCase" : false,
            "matchWholeWord" : false,
            "searchOptions" : "NodeAndSubNodes",
            "matchedNodeUrls" : [ "devices/Device/PLC Logic/Application/folder1" ]
          },
          "jobResultInfo" : "FindElements Job completed successfully "
        }
      },
      "disableDevicePatchRequest" : {
        "value" : {
          "disable" : true
        }
      }
    },
    "parameters" : {
      "path" : {
        "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
        "explode" : false,
        "in" : "path",
        "name" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "recipeDefinition" : {
        "description" : "This is the name of a recipe definition element.\n",
        "explode" : false,
        "in" : "path",
        "name" : "recipeDefinition",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "name" : {
        "description" : "This is the name of a recipeVariable or a recipe.\n",
        "explode" : false,
        "in" : "path",
        "name" : "name",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "jobId" : {
        "description" : "job id",
        "explode" : false,
        "in" : "path",
        "name" : "jobId",
        "required" : true,
        "schema" : {
          "example" : "123",
          "type" : "string"
        },
        "style" : "simple"
      }
    },
    "responses" : {
      "BadRequest" : {
        "$ref" : "./common/responses/BadRequest.yaml#/BadRequest"
      },
      "Unauthorized" : {
        "$ref" : "./common/responses/Unauthorized.yaml#/Unauthorized"
      },
      "Forbidden" : {
        "$ref" : "./common/responses/Forbidden.yaml#/Forbidden"
      },
      "NotFound" : {
        "$ref" : "./common/responses/NotFound.yaml#/NotFound"
      },
      "InternalServerError" : {
        "$ref" : "./common/responses/InternalServerError.yaml#/InternalServerError"
      }
    },
    "schemas" : {
      "Action" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/Action_allOf"
        } ],
        "description" : "Implements additional program code."
      },
      "Application" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/Application_allOf"
        } ],
        "description" : "Application contains elements for an executable control program. Application elements are available only in **Devices** view.\n"
      },
      "ApplicationBuildOptions" : {
        "properties" : {
          "downloadApplicationContent" : {
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "ApplicationElementProperties" : {
        "properties" : {
          "build" : {
            "$ref" : "#/components/schemas/Build"
          },
          "applicationBuildOptions" : {
            "$ref" : "#/components/schemas/ApplicationBuildOptions"
          },
          "bootApplication" : {
            "$ref" : "#/components/schemas/BootApplication"
          }
        },
        "type" : "object"
      },
      "BaseElement" : {
        "description" : "BaseElement is an abstraction level with the basic properties. The property **elementType** is mandatory. It is also an unique identification property for Schema.",
        "discriminator" : {
          "propertyName" : "elementType"
        },
        "properties" : {
          "elementType" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "id" : {
            "description" : "Globally Unique Identifier (GUID) of an element. Top level 'Devices' & 'POUs' return null.",
            "readOnly" : true,
            "type" : "string"
          },
          "children" : {
            "description" : "The array children contains each name of the child-elements.\n\nIf there are elements with identical names, the elementType will be added to the name. \nFor Example:\n- \"mygvl\"\n- \"test.Folder\"\n- \"test.POU\"\n",
            "items" : {
              "type" : "string"
            },
            "readOnly" : true,
            "type" : "array"
          }
        },
        "required" : [ "elementType" ],
        "type" : "object"
      },
      "BootApplication" : {
        "properties" : {
          "updateBootProjectAfterDownload" : {
            "type" : "boolean"
          },
          "updateBootProjectAfterOnlineChange" : {
            "type" : "boolean"
          },
          "remindBootApplicationOnClose" : {
            "type" : "boolean"
          },
          "verifyBootApplicationAfterCreation" : {
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "Build" : {
        "properties" : {
          "excludeFromBuild" : {
            "type" : "boolean"
          },
          "external" : {
            "type" : "boolean"
          },
          "enableSystemCall" : {
            "type" : "boolean"
          },
          "linkAlways" : {
            "type" : "boolean"
          },
          "compilerDefines" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "ChannelInfo" : {
        "properties" : {
          "ioType" : {
            "enum" : [ "Input", "Output" ],
            "type" : "string"
          },
          "variable" : {
            "example" : "Application.PLC_PRG.idx",
            "type" : "string"
          },
          "channelName" : {
            "example" : "AT.Power_supply_status_word",
            "type" : "string"
          },
          "baseType" : {
            "example" : "WORD",
            "type" : "string"
          },
          "address" : {
            "example" : "%IW0",
            "type" : "string"
          },
          "automatic" : {
            "type" : "boolean"
          },
          "subChannels" : {
            "description" : "Array of ChannelInfo",
            "items" : {
              "$ref" : "#/components/schemas/ChannelInfo"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "CompileOptionsEditor" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "type" : "object"
        } ],
        "description" : "CompileOptionsEditor is used for configuring the compile options. This is the global settings, which can be configured from node 'ProjectSettings'. 'Compile options' is added by default when a project is created and it cannot be deleted or added again. It's name in PLC Engineering is language dependent.",
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "fixCompilerVersion" : {
            "description" : "Compiler version that PLC Engineering uses when compiling and downloading for compile.",
            "example" : "3.5.6.0 for version 3.5 SP6",
            "type" : "string"
          },
          "settings" : {
            "$ref" : "#/components/schemas/CompileOptionsSettings"
          },
          "maxCompilerWarnings" : {
            "example" : "<no limit> or 50",
            "type" : "string"
          }
        }
      },
      "CompileOptionsSettings" : {
        "properties" : {
          "allowUniCodeIdentifiers" : {
            "description" : "When true, checkbox 'Allow unicode character for identifier' will be checked.",
            "example" : true,
            "type" : "boolean"
          },
          "replaceConstants" : {
            "description" : "When true, checkbox 'Replace constants' will be checked.",
            "example" : true,
            "type" : "boolean"
          },
          "enableBreakpointLogging" : {
            "description" : "When true, checkbox 'EnableLoggingInBreakpoint' will be checked.",
            "example" : true,
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "CyclicTransmission" : {
        "properties" : {
          "enable" : {
            "description" : "When true, checkbox 'Enable' will be checked.",
            "example" : true,
            "type" : "boolean"
          },
          "interval" : {
            "description" : "PLC Engineering sends the variables within the defined interval.",
            "example" : "T#50ms",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Device" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/Device_allOf"
        } ],
        "description" : "Device is the toplevel element below project element. \n\nDevice can be either:\n- ctrlX CORE\n- ctrlX COREvirtual\n- ctrlX CORE I/O Configuration\n"
      },
      "DevicePatchElements" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/LibraryParameter"
        }, {
          "$ref" : "#/components/schemas/DisableDevice"
        } ]
      },
      "DevicePatchResponseElements" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/Library"
        }, {
          "$ref" : "#/components/schemas/Device"
        } ]
      },
      "DevicesElements" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/Device"
        }, {
          "$ref" : "#/components/schemas/Application"
        }, {
          "$ref" : "#/components/schemas/Action"
        }, {
          "$ref" : "#/components/schemas/DUT"
        }, {
          "$ref" : "#/components/schemas/Folder"
        }, {
          "$ref" : "#/components/schemas/GVL"
        }, {
          "$ref" : "#/components/schemas/PLCLogic"
        }, {
          "$ref" : "#/components/schemas/POU"
        }, {
          "$ref" : "#/components/schemas/POUMethod"
        }, {
          "$ref" : "#/components/schemas/POUProperty"
        }, {
          "$ref" : "#/components/schemas/POUPropertyGet"
        }, {
          "$ref" : "#/components/schemas/POUPropertySet"
        }, {
          "$ref" : "#/components/schemas/LibraryManager"
        }, {
          "$ref" : "#/components/schemas/RecipeManager"
        }, {
          "$ref" : "#/components/schemas/RecipeDefinition"
        }, {
          "$ref" : "#/components/schemas/TaskConfig"
        }, {
          "$ref" : "#/components/schemas/Task"
        }, {
          "$ref" : "#/components/schemas/SymbolConfig"
        }, {
          "$ref" : "#/components/schemas/PersistentVars"
        }, {
          "$ref" : "#/components/schemas/NVLReceiver"
        } ]
      },
      "DevicesTopLevel" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        } ],
        "description" : "Top level **Devices** view in PLC Engineering."
      },
      "DevicesRootElements" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/Device"
        }, {
          "$ref" : "#/components/schemas/Folder"
        } ]
      },
      "DeviceInfo" : {
        "description" : "-  General information that originates from the device description file\n-  These information are shown in the tab 'Information' of the device editor\n",
        "properties" : {
          "name" : {
            "example" : "ctrlX CORE",
            "type" : "string"
          },
          "vendor" : {
            "example" : "Bosch Rexroth AG",
            "type" : "string"
          },
          "deviceType" : {
            "example" : 4096,
            "type" : "integer"
          },
          "id" : {
            "example" : "1001 0080",
            "type" : "string"
          },
          "version" : {
            "example" : "1.8.0.0",
            "type" : "string"
          },
          "orderNumber" : {
            "example" : "dependent on customer specific configuration",
            "type" : "string"
          },
          "description" : {
            "example" : "ctrlX CORE Inputs: 8192 Outputs: 8192 Markers: 8192 Remanent memory: default 64KB configurable to 128KB",
            "type" : "string"
          }
        },
        "required" : [ "deviceType", "id", "version" ],
        "type" : "object"
      },
      "DisableDevice" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/DisableDevice_allOf"
        } ],
        "description" : "Disable or Enable the device. If set to **true**, device will be disabled. Should be used with **PATCH** request only."
      },
      "DUT" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/DUT_allOf"
        } ],
        "description" : "Data unit type"
      },
      "ElementProperties" : {
        "properties" : {
          "build" : {
            "$ref" : "#/components/schemas/Build"
          }
        },
        "type" : "object"
      },
      "ExportPlcOpenXmlJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/ExportPlcOpenXmlJob_allOf"
        } ],
        "description" : "The job 'ExportPlcOpenXmlJob' is used to export the specified node and its children if any to standard 'PLCopen XML' file.\n"
      },
      "FindElementsJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/FindElementsJob_allOf"
        } ],
        "description" : "- The job 'FindElementsJob' is used to search for all the occurence of an element starting from a node including the corresponding subnodes. Search will be based on 'findText' or 'findId'.\n- If both findText and findId are given, then it searches for the node which matches both id and text.\n"
      },
      "Folder" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/Folder_allOf"
        } ],
        "description" : "Folders are structural elements. The char \".\" is not allowed in the name, although it would be possible in ctrlX PLC Engineering."
      },
      "FolderProperties" : {
        "properties" : {
          "build" : {
            "$ref" : "#/components/schemas/Build"
          },
          "documentation" : {
            "description" : "Represent 'Documentation' tab in the folder properties dialog.",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "GVL" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/GVL_allOf"
        } ],
        "description" : "Global variable list. This can also be used as NVL(Sender) if it is configured under Devices view."
      },
      "ImportFieldbusConfigJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/ImportFieldbusConfigJob_allOf"
        } ],
        "description" : "The job 'ImportFieldbusConfig' is used to import all configured devices of the 'busType' from the control.\nThere is no possibility to merge with existing elements.\n"
      },
      "ImportOfflineFieldbusConfigJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/ImportOfflineFieldbusConfigJob_allOf"
        } ],
        "description" : "The job 'ImportOfflineFieldbusConfigJob' is used to import all configured devices of the 'busType' from the file.\nThere is no possibility to merge with existing elements.\n"
      },
      "ImportPlcOpenXmlJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/ImportPlcOpenXmlJob_allOf"
        } ],
        "description" : "The job 'ImportPlcOpenXmlJob' is used to import the given xml file of standard 'PLCopen XML' on the specified node.\n"
      },
      "Job" : {
        "discriminator" : {
          "propertyName" : "jobType"
        },
        "example" : {
          "jobResultInfo" : "jobResultInfo",
          "progress" : 10,
          "id" : "123",
          "state" : "Running",
          "jobType" : "jobType"
        },
        "properties" : {
          "jobType" : {
            "description" : "one of available jobTypes (e.g. ImportFieldbusConfigJob, PreCompileJob, ProjectJob, ExportPlcOpenXmlJob, ImportPlcOpenXmlJob, ImportOfflineFieldbusConfigJob, MoveElementsJob, FindElementsJob)",
            "type" : "string"
          },
          "id" : {
            "description" : "Id of a job",
            "example" : "123",
            "readOnly" : true,
            "type" : "string"
          },
          "state" : {
            "enum" : [ "Pending", "Failed", "Done", "Running" ],
            "example" : "Running",
            "readOnly" : true,
            "type" : "string"
          },
          "progress" : {
            "description" : "Progress of the task in percent",
            "example" : 10,
            "maximum" : 100,
            "minimum" : 0,
            "readOnly" : true,
            "type" : "integer"
          },
          "jobResultInfo" : {
            "type" : "string"
          }
        },
        "required" : [ "jobType" ],
        "type" : "object"
      },
      "JobList" : {
        "example" : {
          "jobs" : [ {
            "jobResultInfo" : "jobResultInfo",
            "progress" : 10,
            "id" : "123",
            "state" : "Running",
            "jobType" : "jobType"
          }, {
            "jobResultInfo" : "jobResultInfo",
            "progress" : 10,
            "id" : "123",
            "state" : "Running",
            "jobType" : "jobType"
          } ]
        },
        "properties" : {
          "jobs" : {
            "description" : "a list of jobs",
            "items" : {
              "$ref" : "#/components/schemas/Job"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "Jobs" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/ImportFieldbusConfigJob"
        }, {
          "$ref" : "#/components/schemas/PreCompileJob"
        }, {
          "$ref" : "#/components/schemas/ProjectJob"
        }, {
          "$ref" : "#/components/schemas/ImportPlcOpenXmlJob"
        }, {
          "$ref" : "#/components/schemas/ExportPlcOpenXmlJob"
        }, {
          "$ref" : "#/components/schemas/ImportOfflineFieldbusConfigJob"
        }, {
          "$ref" : "#/components/schemas/MoveElementsJob"
        }, {
          "$ref" : "#/components/schemas/FindElementsJob"
        } ]
      },
      "Language" : {
        "description" : "Possible programming languages for PLCs:\n- FBD (Function Block Diagram)\n- ST (Structured Text)\n- CFC (Continuous Function Chart)\n- SFC (Sequential Function Chart)\n- IL (Instruction List)\n- LD (Ladder Diagram)\n",
        "enum" : [ "FBD", "ST", "CFC", "SFC", "IL", "LD" ],
        "type" : "string"
      },
      "Library" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/Library_allOf"
        } ],
        "description" : "Library element\n- \"elementType\"=\"Library\"\n"
      },
      "LibraryBasics" : {
        "example" : {
          "name" : "Standard",
          "placeholderName" : "placeholderName",
          "company" : "System",
          "version" : "3.5.15.0"
        },
        "properties" : {
          "name" : {
            "description" : "name of the library",
            "example" : "Standard",
            "readOnly" : true,
            "type" : "string"
          },
          "version" : {
            "description" : "version of the library",
            "example" : "3.5.15.0",
            "readOnly" : true,
            "type" : "string"
          },
          "company" : {
            "description" : "company of the library",
            "example" : "System",
            "readOnly" : true,
            "type" : "string"
          },
          "placeholderName" : {
            "description" : "placeholder name of the library",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "required" : [ "company", "name", "placeholderName", "version" ],
        "type" : "object"
      },
      "LibraryList" : {
        "description" : "a list of libraries",
        "example" : {
          "installedLibraries" : [ {
            "name" : "Standard",
            "placeholderName" : "placeholderName",
            "company" : "System",
            "version" : "3.5.15.0"
          }, {
            "name" : "Standard",
            "placeholderName" : "placeholderName",
            "company" : "System",
            "version" : "3.5.15.0"
          } ],
          "repositoryName" : "repositoryName"
        },
        "properties" : {
          "repositoryName" : {
            "type" : "string"
          },
          "installedLibraries" : {
            "items" : {
              "$ref" : "#/components/schemas/LibraryBasics"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "LibraryManager" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/LibraryManager_allOf"
        } ],
        "description" : "LibraryManager contains a set of libraries. Element with fixed name \"library-manager\". It's name in PLC Engineering is shown language dependent."
      },
      "LibraryParameter" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/LibraryParameter_allOf"
        } ],
        "description" : "Used to edit the library parameter list of the library project."
      },
      "LibraryParameterBaseElement" : {
        "properties" : {
          "name" : {
            "description" : "Name of the element",
            "example" : "testParameter",
            "type" : "string"
          },
          "value" : {
            "description" : "Value of the element",
            "example" : "5",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "ListItem" : {
        "description" : "General information of elements.",
        "example" : {
          "name" : "name",
          "elementType" : "elementType",
          "url" : "url"
        },
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "elementType" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          }
        },
        "readOnly" : true,
        "type" : "object"
      },
      "MoveElementsJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/MoveElementsJob_allOf"
        } ],
        "description" : "The job 'MoveElementsJob' is used to shift the element from one node to another including all the submodules.\n"
      },
      "NetworkSettings" : {
        "properties" : {
          "task" : {
            "description" : "Task of the current application that controls the variables to be received.",
            "example" : "MainTask",
            "type" : "string"
          },
          "sender" : {
            "description" : "Available sender NVLs of another device in the project.",
            "example" : "NVL [ctrlX_COREvirtual: PLC Logic: Application]",
            "type" : "string"
          },
          "importFromFile" : {
            "description" : "File name in GVL export file *.gvl format",
            "example" : "C:\\Users\\temp\\nvl.gvl",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "NetworkVariables" : {
        "description" : "GVL added under POUs does not have NetworkVariables property. but default value of this property will be displayed.",
        "properties" : {
          "networkType" : {
            "description" : "Type of the network.",
            "example" : "UDP",
            "type" : "string"
          },
          "task" : {
            "description" : "Task of the current application that controls the variables to be sent.",
            "example" : "MainTask",
            "type" : "string"
          },
          "listIdentifier" : {
            "description" : "Used to identify the network variable list. Must be unique.",
            "example" : "1",
            "type" : "string"
          },
          "packVariables" : {
            "type" : "boolean"
          },
          "transmitChecksum" : {
            "type" : "boolean"
          },
          "acknowledgement" : {
            "type" : "boolean"
          },
          "cyclicTransmission" : {
            "$ref" : "#/components/schemas/CyclicTransmission"
          },
          "transmitOnChange" : {
            "$ref" : "#/components/schemas/TransmitOnChange"
          },
          "transmitOnEvent" : {
            "$ref" : "#/components/schemas/TransmitOnEvent"
          },
          "settings" : {
            "$ref" : "#/components/schemas/Settings"
          }
        },
        "type" : "object"
      },
      "NVLReceiver" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/NVLReceiver_allOf"
        } ],
        "description" : "Network variable list (Receiver)."
      },
      "NVLSenderParameters" : {
        "description" : "- Parameter name can be Port and Broadcast Adr.\n- If the parameters are not set default value will be taken. \n- Default value for port is  1202.\n- Default value for Broadcast Adr. is 255.255.255.255.\n- If the settings is not enabled then parameters cannot be updated.\n",
        "properties" : {
          "name" : {
            "enum" : [ "Port", "Broadcast Adr" ],
            "example" : "Port.",
            "type" : "string"
          },
          "value" : {
            "example" : "1202",
            "type" : "string"
          }
        }
      },
      "Path" : {
        "description" : "For example path to a library file or path to save a project.\n",
        "example" : {
          "path" : "C:\\User\\Libraries\\MyLibrary.complied-library or C:\\User\\ABC_Test.project"
        },
        "properties" : {
          "path" : {
            "example" : "C:\\User\\Libraries\\MyLibrary.complied-library or C:\\User\\ABC_Test.project",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "PersistentVars" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/PersistentVars_allOf"
        } ],
        "description" : "Persistent Vars object that can be added below application node. Only one 'PersistentVars' object is allowed below application node."
      },
      "PLCLogic" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/PLCLogic_allOf"
        } ],
        "description" : "PLCLogic is automatically created on adding a plc device. Structural element with fixed name \"Plc Logic\". Its name in PLC Engineering is shown language dependent."
      },
      "POU" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/POU_allOf"
        } ],
        "description" : "Program organization unit. Here you write source code."
      },
      "POUMethod" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/POUMethod_allOf"
        } ],
        "description" : "Extension of POU for a series of statements."
      },
      "POUProperty" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/POUProperty_allOf"
        } ],
        "description" : "Extension of POU for external access to data."
      },
      "POUPropertyGet" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/POUPropertyGet_allOf"
        } ],
        "description" : "Extension of POUProperty."
      },
      "POUPropertySet" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/POUPropertySet_allOf"
        } ],
        "description" : "Extension of POUProperty."
      },
      "PousElements" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/DUT"
        }, {
          "$ref" : "#/components/schemas/Folder"
        }, {
          "$ref" : "#/components/schemas/GVL"
        }, {
          "$ref" : "#/components/schemas/POU"
        }, {
          "$ref" : "#/components/schemas/LibraryManager"
        }, {
          "$ref" : "#/components/schemas/ProjectInfo"
        }, {
          "$ref" : "#/components/schemas/ProjectSettings"
        }, {
          "$ref" : "#/components/schemas/Action"
        }, {
          "$ref" : "#/components/schemas/POUMethod"
        }, {
          "$ref" : "#/components/schemas/POUProperty"
        }, {
          "$ref" : "#/components/schemas/POUPropertyGet"
        }, {
          "$ref" : "#/components/schemas/POUPropertySet"
        }, {
          "$ref" : "#/components/schemas/SfcEditor"
        }, {
          "$ref" : "#/components/schemas/CompileOptionsEditor"
        } ]
      },
      "PousRootElements" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/DUT"
        }, {
          "$ref" : "#/components/schemas/Folder"
        }, {
          "$ref" : "#/components/schemas/GVL"
        }, {
          "$ref" : "#/components/schemas/POU"
        }, {
          "$ref" : "#/components/schemas/LibraryManager"
        }, {
          "$ref" : "#/components/schemas/ProjectInfo"
        }, {
          "$ref" : "#/components/schemas/ProjectSettings"
        } ]
      },
      "PousTopLevel" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        } ],
        "description" : "Top level **POUs** view in PLC Engineering."
      },
      "PreCompileJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/PreCompileJob_allOf"
        } ],
        "description" : "- 'Disable' this suppresses the delivery of the language model during the import and thus the precompile is not started. **CAUTION!** after import is done or in case of exception while import, PreCompileJob should be enabled again. \n- 'Enable' precompile will be enabled again.\n",
        "type" : "object"
      },
      "Product" : {
        "description" : "information regarding product",
        "example" : {
          "versionText" : "WRK-V-RC"
        },
        "properties" : {
          "versionText" : {
            "example" : "WRK-V-RC",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Project" : {
        "description" : "Includes everything for the production of a control program.",
        "example" : {
          "profileName" : "ctrlX Plc 0.0.3",
          "path" : "C:\\User\\Admin\\PLCProjects\\",
          "lastModifiedTime" : "2019-11-11T11:37:03.2873026+01:00",
          "lastAccessTime" : "2019-11-11T11:37:03.2952358+01:00",
          "creationTime" : "2019-10-29T09:32:36.1187391+01:00",
          "name" : "ABC_Test.project",
          "compilerVersion" : "3.5.15.0",
          "visualisationProfile" : "ctrlXPlcVisu0.0.3",
          "elementList" : [ {
            "name" : "name",
            "elementType" : "elementType",
            "url" : "url"
          }, {
            "name" : "name",
            "elementType" : "elementType",
            "url" : "url"
          } ]
        },
        "properties" : {
          "name" : {
            "example" : "ABC_Test.project",
            "type" : "string"
          },
          "path" : {
            "example" : "C:\\User\\Admin\\PLCProjects\\",
            "type" : "string"
          },
          "creationTime" : {
            "example" : "2019-10-29T09:32:36.1187391+01:00",
            "type" : "string"
          },
          "lastModifiedTime" : {
            "example" : "2019-11-11T11:37:03.2873026+01:00",
            "type" : "string"
          },
          "lastAccessTime" : {
            "example" : "2019-11-11T11:37:03.2952358+01:00",
            "type" : "string"
          },
          "profileName" : {
            "example" : "ctrlX Plc 0.0.3",
            "type" : "string"
          },
          "compilerVersion" : {
            "example" : "3.5.15.0",
            "type" : "string"
          },
          "visualisationProfile" : {
            "example" : "ctrlXPlcVisu0.0.3",
            "type" : "string"
          },
          "elementList" : {
            "items" : {
              "$ref" : "#/components/schemas/ListItem"
            },
            "readOnly" : true,
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "ProjectInfo" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/ProjectInfo_allOf"
        } ],
        "description" : "Project Information object is required for the creation of the Lib\nElement with fixed name. Its name in  PLC Engineering is shown language dependent.\n"
      },
      "ProjectInfoproperties" : {
        "properties" : {
          "author" : {
            "description" : "Author of the Lib.",
            "example" : "_DEFAULT_Bosch Rexroth AG",
            "type" : "string"
          },
          "company" : {
            "description" : "Company of the Lib",
            "example" : "_DEFAULT_Bosch Rexroth AG",
            "type" : "string"
          },
          "compiledLibraryCompatibilityVersion" : {
            "description" : "PLC Engineering version for which the currently open library project is compatible.",
            "example" : "ctrlX PLC 1.3.0",
            "type" : "string"
          },
          "defaultNamespace" : {
            "description" : "Default namespace of the Lib.",
            "example" : "_DEFAULT_namespace",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the Lib.",
            "example" : "Brief description of the Lib (max. 80 characters)",
            "type" : "string"
          },
          "docFormat" : {
            "description" : "Doc format of the Lib.",
            "example" : "reStructuredText",
            "type" : "string"
          },
          "libDocContent" : {
            "description" : "Lib doc content of the Lib",
            "example" : "CommentsAndDocs",
            "type" : "string"
          },
          "placeholder" : {
            "description" : "Placeholder for the Lib",
            "example" : "ADAPT_THIS_PLACEHOLDER_VALUE_OR_REMOVE_THE_KEY_COMPLETELY",
            "type" : "string"
          },
          "project" : {
            "description" : "Name of the Lib project.",
            "example" : "ApiTest",
            "type" : "string"
          },
          "released" : {
            "description" : "Released flag for the Lib.",
            "example" : false,
            "type" : "boolean"
          },
          "title" : {
            "description" : "Title of the Lib.",
            "example" : "_DEFAULT_CXA_Library_Template",
            "type" : "string"
          },
          "version" : {
            "description" : "Version of the Lib.",
            "example" : "0.1.0.0",
            "type" : "string"
          }
        }
      },
      "ProjectJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/ProjectJob_allOf"
        } ],
        "description" : "- 'Open' opens project as current project\n- 'Close' closes current project without saving\n- 'Save' saves the current project. If a 'path' is contained, 'save as' is performed\n",
        "type" : "object"
      },
      "ProjectSettings" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/ProjectSettings_allOf"
        } ],
        "description" : "ProjectSettings contains a set of options to configure project.\nElement with fixed name. It's name in PLC Engineering is language dependent. Node 'Project Settings' is added by default when a project is created. This node cannot be deleted or added again.\n"
      },
      "Recipe" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/Recipe_allOf"
        } ],
        "description" : "Recipe type",
        "required" : [ "name" ],
        "type" : "object"
      },
      "RecipeBaseElement" : {
        "properties" : {
          "name" : {
            "description" : "Name of the element",
            "example" : "myTestName",
            "type" : "string"
          },
          "value" : {
            "description" : "Value of the element",
            "example" : "5",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "RecipeDefinition" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/PLCLogic_allOf"
        } ],
        "description" : "RecipeDefinition type"
      },
      "RecipeList" : {
        "items" : {
          "$ref" : "#/components/schemas/Recipe"
        },
        "type" : "array"
      },
      "RecipeManager" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/RecipeManager_allOf"
        } ],
        "description" : "RecipeManager contains and manages information about recipe definition child elements. Element with fixed name \"recipe-manager\". It's name in PLC Engineering is shown language dependent."
      },
      "RecipeVariable" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/RecipeVariable_allOf"
        } ],
        "description" : "RecipeVariable type",
        "required" : [ "name" ],
        "type" : "object"
      },
      "RecipeVariableList" : {
        "items" : {
          "$ref" : "#/components/schemas/RecipeVariable"
        },
        "type" : "array"
      },
      "RepositoryList" : {
        "example" : {
          "repositories" : [ "System", "System" ]
        },
        "properties" : {
          "repositories" : {
            "items" : {
              "example" : "System",
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "Settings" : {
        "description" : "- Protocol-specific settings. Possible entries depend on the network library.\n",
        "properties" : {
          "enable" : {
            "description" : "If the network type is selected value will be set to true.",
            "readOnly" : true,
            "type" : "boolean"
          },
          "parameters" : {
            "items" : {
              "$ref" : "#/components/schemas/NVLSenderParameters"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "SfcBuild" : {
        "properties" : {
          "calcActiveTransOnly" : {
            "description" : "If set to true, Calculate active transitions only checkbox will be checked",
            "example" : true,
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "SfcEditor" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/SfcEditor_allOf"
        } ],
        "description" : "SfcEditor contains **flags** and **build** options to configure SFC settings. This is the global settings, which can be configured from node 'ProjectSettings'.\nElement with fixed name. It's name in PLC Engineering is language dependent.\n"
      },
      "SfcFlags" : {
        "properties" : {
          "name" : {
            "description" : "Name of the flag",
            "example" : "SFCEnableLimit",
            "type" : "string"
          },
          "use" : {
            "description" : "If set to true, use checkbox of the flag will be checked",
            "example" : true,
            "type" : "boolean"
          },
          "declare" : {
            "description" : "If set to true, declare checkbox of the flag will be checked",
            "example" : true,
            "type" : "boolean"
          }
        },
        "required" : [ "declare", "name", "use" ],
        "type" : "object"
      },
      "Symbol" : {
        "properties" : {
          "libraryNamespace" : {
            "description" : "Parameter 'libraryNamespace' will diaplay value only for Library symbols. Value may have be hierarchical, in this case each value will be seperated by '/'.",
            "example" : "IecVarAccessLibrary/SymbolicVarsBase/Stu",
            "type" : "string"
          },
          "name" : {
            "description" : "Column name 'Symbols' in the 'Symbol Configuration' editor.",
            "example" : "Constants",
            "type" : "string"
          },
          "isSelected" : {
            "description" : "Column 'Checkbox' in the 'Symbol Configuration' editor.",
            "example" : true,
            "type" : "boolean"
          },
          "variables" : {
            "description" : "Array of 'SymbolVariable'.",
            "items" : {
              "$ref" : "#/components/schemas/SymbolVariable"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "SymbolConfig" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/SymbolConfig_allOf"
        } ],
        "description" : "Symbol Configuration object is required for the configuration of Symbols. Element with fixed name. It's name in PLC Engineering is shown language dependent. Only one 'Symbol Configuration' object is allowed below application node."
      },
      "SymbolVariable" : {
        "description" : "These Symbols are available in 'Symbol Configuration' editor.",
        "properties" : {
          "name" : {
            "description" : "Column name 'Symbols' in the 'Symbol Configuration' editor.",
            "example" : "RuntimeVersion",
            "type" : "string"
          },
          "accessRights" : {
            "description" : "Column name 'Access Rights' in the 'Symbol Configuration' editor.",
            "example" : "Void",
            "type" : "string"
          },
          "maximalAccess" : {
            "description" : "Column name 'Maximal' in the 'Symbol Configuration' editor.",
            "example" : "Read",
            "type" : "string"
          },
          "attribute" : {
            "description" : "Column name 'Attribute' in the 'Symbol Configuration' editor.",
            "example" : "Void",
            "type" : "string"
          },
          "type" : {
            "description" : "Column name 'Type' in the 'Symbol Configuration' editor.",
            "example" : "VERSION",
            "type" : "string"
          },
          "fullQualifiedBaseType" : {
            "description" : "If null then it's not a structure type, else this structure type will be available in 'types' array.",
            "example" : "CXAC_Base.FB_CXACi",
            "type" : "string"
          },
          "comment" : {
            "description" : "Column name 'Comment' in the 'Symbol Configuration' editor.",
            "example" : "the runtime version number as defined by the device description.",
            "type" : "string"
          },
          "variableType" : {
            "description" : "For local variables this parameter must be 'Var', In case of an executable method this parameter must be 'Method'.",
            "example" : "Var",
            "type" : "string"
          },
          "isSelected" : {
            "description" : "Column 'Checkbox' in the 'Symbol Configuration' editor.",
            "example" : true,
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "Task" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/Task_allOf"
        } ],
        "description" : "Task element, which can be added below 'Task Configuration'."
      },
      "TaskConfig" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/TaskConfig_allOf"
        } ],
        "description" : "Task Configuration object is required for the configuration of Tasks. Element with fixed name. It's name in PLC Engineering is shown language dependent. Only one 'Task Configuration' object is allowed below application node. By default a 'Task' and a 'TaskGroup' will be added when a new Task Configuration object is created."
      },
      "TaskConfigGroup" : {
        "description" : "Represent 'Task Groups' in Task Configuration",
        "properties" : {
          "groupName" : {
            "description" : "Name of the task group",
            "example" : "IEC-Tasks1",
            "type" : "string"
          },
          "core" : {
            "description" : "- Fixed Pinned (-2)\n- Sequentially Pinned (-1)\n- 0\n- 1\n- 2\n- 3\n",
            "example" : -2,
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "TaskPouCall" : {
        "description" : "- If any entry exists, pous will be added\n- In the below example 'pou1' & 'pou2' will be added        \n```json\n\"pouCalls\": [\n    {\n        \"name\": \"pou1\",\n        \"comment\": \"xyz\"         \n    },\n    {\n        \"name\": \"pou2\",\n        \"comment\": \"xyz\"         \n    }\n]\n```\n- If an empty array is passed, all the added pous below 'Task' will be removed\n```json\n \"pouCalls\": []\n",
        "properties" : {
          "name" : {
            "description" : "Name of the pou",
            "example" : "PLC_PRG",
            "type" : "string"
          },
          "comment" : {
            "description" : "Comment",
            "example" : "1st POU",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "TaskType" : {
        "properties" : {
          "name" : {
            "description" : "Name of the task type",
            "example" : "external",
            "type" : "string"
          },
          "value" : {
            "description" : "Value of the task type. For task name Freewheeling, value will be empty(\"\")",
            "example" : "TASK_EXTERNAL_EVENT_01",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "TaskWatchdog" : {
        "properties" : {
          "enable" : {
            "description" : "When true, checkbox 'Enable' will be checked",
            "example" : true,
            "type" : "boolean"
          },
          "time" : {
            "description" : "Watchdog time",
            "example" : "200 or t#200ms",
            "type" : "string"
          },
          "sensitivity" : {
            "description" : "Watchdog sensitivity",
            "example" : "5",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "TransmitOnChange" : {
        "properties" : {
          "enable" : {
            "description" : "When true, checkbox 'Enable' will be checked.",
            "example" : true,
            "type" : "boolean"
          },
          "minimumGap" : {
            "description" : "Least amount of time between two transmissions.",
            "example" : "T#20ms",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "TransmitOnEvent" : {
        "properties" : {
          "enable" : {
            "description" : "When true, checkbox 'Enable' will be checked.",
            "example" : true,
            "type" : "boolean"
          },
          "variable" : {
            "description" : "PLC Engineering sends the variables as soon as the defined variable yields TRUE.",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Problem" : {
        "description" : "This document defines a \"problem detail\" as a way  to carry machine-readable details of errors in a  HTTP response to avoid the need to define new error  response formats for HTTP APIs.\n",
        "properties" : {
          "type" : {
            "default" : "about:blank",
            "description" : "A URI reference [RFC3986] that identifies the problem type. \nThis specification encourages that, when dereferenced, \nit provide human-readable documentation for the problem type \n(e.g., using HTML [W3C.REC-html5-20141028]). When this member \nis not present, its value is assumed to be \"about:blank\".\n",
            "example" : "https://example.com/probs/out-of-credit",
            "format" : "uri",
            "type" : "string"
          },
          "title" : {
            "description" : "A short, human-readable summary of the problem type. \nIt SHOULD NOT change from occurrence to occurrence of the problem, \nexcept for purposes of localization (e.g., using proactive content \nnegotiation; see [RFC7231], Section 3.4).\n",
            "example" : "You do not have enough credit.",
            "type" : "string"
          },
          "status" : {
            "description" : "The HTTP status code ([RFC7231], Section 6) generated by the \norigin server for this occurrence of the problem.\n",
            "example" : 403,
            "format" : "int32",
            "type" : "integer"
          },
          "detail" : {
            "description" : "A human-readable explanation specific to this occurrence of the problem.\n",
            "example" : "Your current balance is 30, but that costs 50.",
            "type" : "string"
          },
          "instance" : {
            "description" : "A URI reference that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n",
            "example" : "/account/12345/msgs/abc",
            "type" : "string"
          },
          "code" : {
            "deprecated" : true,
            "description" : "An error code issued by the system that caused the original problem.\nThis code can be used to track down the root cause of the error.\n",
            "example" : "F360001",
            "type" : "string"
          },
          "mainDiagnosisCode" : {
            "description" : "The main diagnosis code is issued by the system that caused the problem.\nThis code can be used to track down the root cause and source of the error.\nIt can be used to search in the documentation for a solution.\nIt SHOULD NOT change from occurrence to occurrence of the same problem.\n",
            "example" : "080F0100",
            "type" : "string"
          },
          "detailedDiagnosisCode" : {
            "description" : "The detailed diagnosis code issued by the system that caused the problem.\nThis code can be used to track down the detailed cause and source of the error.\nIt can be used to search in the documentation for a solution.\nThe detailed diagnosis code gives additional information about the cause of the error.\nIt SHOULD NOT change from occurrence to occurrence of the same problem.\n",
            "example" : "00666001",
            "type" : "string"
          },
          "dynamicDescription" : {
            "description" : "A dynamic description gives detailed information about the occurrence of a problem.\nIt can change between different occurrences of the same error.\n",
            "example" : "value = -4.5",
            "type" : "string"
          },
          "severity" : {
            "description" : " Severity of a problem as defined RFC5424 of the Syslog standard, see https://tools.ietf.org/html/rfc5424",
            "enum" : [ "Emergency", "Alert", "Critical", "Error", "Warning", "Notice", "Informational", "Debug" ],
            "example" : "Error",
            "type" : "string"
          },
          "links" : {
            "description" : "Collection of links to fix the problem. E.g. links to online user manual,\nto an online community (using tags) or a developer chat (e.g. Slack).\n",
            "items" : {
              "example" : "https://stackoverflow.com/questions/tagged/boschrexroth+controlx+f360001",
              "format" : "uri",
              "type" : "string"
            },
            "type" : "array"
          },
          "moreInfo" : {
            "additionalProperties" : true,
            "example" : {
              "trace" : "ExampleClass.cpp#452 Null pointer exception",
              "class" : "ExampleClass"
            },
            "type" : "object"
          }
        },
        "required" : [ "title", "type" ],
        "type" : "object",
        "x-version" : "1.0.0"
      },
      "Action_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "implementation" : {
            "type" : "string"
          }
        }
      },
      "Application_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ApplicationElementProperties"
          }
        }
      },
      "Device_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "disable" : {
            "description" : "Disable or Enable the device. If set to **true**, device will be disabled. Should be used with **PATCH** request only.",
            "example" : true,
            "type" : "boolean"
          },
          "deviceInfo" : {
            "$ref" : "#/components/schemas/DeviceInfo"
          },
          "ioMapping" : {
            "items" : {
              "$ref" : "#/components/schemas/ChannelInfo"
            },
            "type" : "array"
          }
        }
      },
      "DisableDevice_allOf" : {
        "properties" : {
          "disable" : {
            "example" : true,
            "type" : "boolean"
          }
        }
      },
      "DUT_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "declaration" : {
            "type" : "string"
          },
          "textlistsupport" : {
            "type" : "boolean"
          }
        }
      },
      "ExportPlcOpenXmlJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "description" : "node which needs to be exported",
            "example" : "/devices/device/PLC Logic/Application/POU_SFC",
            "type" : "string"
          },
          "filePath" : {
            "description" : "path where xml file needs to be saved",
            "example" : "X:\\ctrlX\\PLCProjects\\PLCOpenExport",
            "type" : "string"
          },
          "fileName" : {
            "description" : "name of the file (with or without extension).",
            "example" : "POU_SFC or POU_SFC.xml",
            "type" : "string"
          }
        }
      },
      "ExportPlcOpenXmlJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/ExportPlcOpenXmlJob_allOf_jobParameters"
          }
        }
      },
      "FindElementsJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "description" : "Path of the node from where the search has to begin.",
            "example" : "/devices/Device/PLC Logic/Application",
            "type" : "string"
          },
          "findText" : {
            "description" : "Text to be searched.",
            "example" : "folder",
            "type" : "string"
          },
          "findId" : {
            "description" : "Id to be searched.",
            "example" : "be0458db-09f5-43c7-8bbf-0347b8f11765",
            "type" : "string"
          },
          "matchCase" : {
            "description" : "Finds all occurrences with the exact combination of uppercase and lowercase letters specified in the findText. Default value is false.",
            "example" : true,
            "type" : "boolean"
          },
          "matchWholeWord" : {
            "description" : "Searches for the complete word. Default value is false.",
            "example" : true,
            "type" : "boolean"
          },
          "searchOptions" : {
            "description" : "Specifies the search range.",
            "enum" : [ "NodeAndSubNodes" ],
            "type" : "string"
          },
          "matchedNodeUrls" : {
            "description" : "Lists the path of all the nodes, which matches the findId and findText.",
            "example" : [ "devices/Device/PLC Logic/Application/folder1" ],
            "items" : {
              "type" : "string"
            },
            "readOnly" : true,
            "type" : "array"
          }
        }
      },
      "FindElementsJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/FindElementsJob_allOf_jobParameters"
          }
        }
      },
      "Folder_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/FolderProperties"
          }
        }
      },
      "GVL_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "declaration" : {
            "type" : "string"
          },
          "networkVariables" : {
            "$ref" : "#/components/schemas/NetworkVariables"
          }
        }
      },
      "ImportFieldbusConfigJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "example" : "/devices/device/Realtime_Data",
            "type" : "string"
          },
          "username" : {
            "description" : "used for authentification on the control",
            "example" : "username",
            "type" : "string"
          },
          "password" : {
            "description" : "used for authentification on the control",
            "example" : "password",
            "type" : "string"
          },
          "busType" : {
            "enum" : [ "ethercat" ],
            "type" : "string"
          },
          "forceInsert" : {
            "default" : false,
            "description" : "If 'true' existing elements are deleted before found elements are imported. If 'false' Job is not started when elements exist and request returns with error.",
            "type" : "boolean"
          }
        }
      },
      "ImportFieldbusConfigJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/ImportFieldbusConfigJob_allOf_jobParameters"
          }
        }
      },
      "ImportOfflineFieldbusConfigJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "example" : "/devices/device/Realtime_Data",
            "type" : "string"
          },
          "filePath" : {
            "description" : "path where xml file exists",
            "example" : "X:\\ctrlX\\PLCProjects\\PLCOpenExport",
            "type" : "string"
          },
          "fileName" : {
            "description" : "name of the file.",
            "example" : "Ethercat.xml",
            "type" : "string"
          },
          "busType" : {
            "enum" : [ "ethercat" ],
            "type" : "string"
          },
          "forceInsert" : {
            "default" : false,
            "description" : "If 'true' existing elements are deleted before found elements are imported. If 'false' Job is not started when elements exist and request returns with error.",
            "type" : "boolean"
          }
        }
      },
      "ImportOfflineFieldbusConfigJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/ImportOfflineFieldbusConfigJob_allOf_jobParameters"
          }
        }
      },
      "ImportPlcOpenXmlJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "description" : "node on which xml file needs to be imported",
            "example" : "/devices/device/PLC Logic/Application",
            "type" : "string"
          },
          "filePath" : {
            "description" : "path where xml file exists",
            "example" : "X:\\ctrlX\\PLCProjects\\PLCOpenExport",
            "type" : "string"
          },
          "fileName" : {
            "description" : "name of the file (with or without extension) that needs to be imported.",
            "example" : "POU_SFC or POU_SFC.xml",
            "type" : "string"
          }
        }
      },
      "ImportPlcOpenXmlJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/ImportPlcOpenXmlJob_allOf_jobParameters"
          }
        }
      },
      "Library_allOf" : {
        "properties" : {
          "version" : {
            "description" : "version of the library",
            "example" : "3.5.15.0",
            "type" : "string"
          },
          "company" : {
            "description" : "company of the library",
            "example" : "System",
            "type" : "string"
          },
          "placeholderName" : {
            "description" : "placeholder name of the library",
            "type" : "string"
          },
          "displayName" : {
            "readOnly" : true,
            "type" : "string"
          },
          "effectiveVersion" : {
            "readOnly" : true,
            "type" : "string"
          },
          "systemLibrary" : {
            "readOnly" : true,
            "type" : "boolean"
          },
          "description" : {
            "readOnly" : true,
            "type" : "string"
          },
          "resolutionInfo" : {
            "readOnly" : true,
            "type" : "string"
          },
          "parameters" : {
            "description" : "List of all parameter names and corresponding values.",
            "items" : {
              "$ref" : "#/components/schemas/LibraryParameterBaseElement"
            },
            "type" : "array"
          }
        },
        "required" : [ "company", "placeholderName", "version" ]
      },
      "LibraryManager_allOf" : {
        "properties" : {
          "displayName" : {
            "description" : "Displayed name in the project",
            "example" : "Library Manager",
            "readOnly" : true,
            "type" : "string"
          },
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          }
        }
      },
      "LibraryParameter_allOf" : {
        "properties" : {
          "parameters" : {
            "description" : "List of all parameter names and corresponding values.\n",
            "items" : {
              "$ref" : "#/components/schemas/LibraryParameterBaseElement"
            },
            "type" : "array"
          }
        }
      },
      "MoveElementsJob_allOf_jobParameters" : {
        "properties" : {
          "sourceNodeUrl" : {
            "description" : "Source location of the node which has to be shifted.",
            "example" : "devices/device/PLC Logic/Application/Folder1",
            "type" : "string"
          },
          "destinationNodeUrl" : {
            "description" : "Destination location to which the node has to be shifted.",
            "example" : "devices/device/PLC Logic/Application/Folder2",
            "type" : "string"
          },
          "insertPosition" : {
            "description" : "- Position where the sourceNode has to be inserted.\n- If not specified default value -1 will be set, which inserts the node at the end.\n- If the nodes are sorted in alphabetical order, then insertion will be based on the node name.\n",
            "example" : 2,
            "type" : "integer"
          }
        }
      },
      "MoveElementsJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/MoveElementsJob_allOf_jobParameters"
          }
        }
      },
      "NVLReceiver_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "declaration" : {
            "readOnly" : true,
            "type" : "string"
          },
          "networkSettings" : {
            "$ref" : "#/components/schemas/NetworkSettings"
          }
        }
      },
      "PersistentVars_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "declaration" : {
            "example" : "{attribute 'qualified_only'}\\nVAR_GLOBAL PERSISTENT RETAIN\\nEND_VAR",
            "type" : "string"
          }
        }
      },
      "PLCLogic_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          }
        }
      },
      "POU_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "declaration" : {
            "type" : "string"
          },
          "implementation" : {
            "type" : "string"
          },
          "level" : {
            "default" : "Standard",
            "enum" : [ "Void", "Basic", "Extended", "System", "Standard" ],
            "type" : "string"
          }
        },
        "required" : [ "language" ]
      },
      "POUMethod_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "declaration" : {
            "example" : "METHOD POUFBMethod\\nVAR_INPUT\\nEND_VAR\\n",
            "type" : "string"
          },
          "implementation" : {
            "type" : "string"
          }
        },
        "required" : [ "language" ]
      },
      "POUProperty_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "declaration" : {
            "example" : "PROPERTY POUFBProperty : bool\\n",
            "type" : "string"
          }
        }
      },
      "POUPropertyGet_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "declaration" : {
            "example" : "VAR\\ni:INT;\\nEND_VAR",
            "type" : "string"
          },
          "implementation" : {
            "type" : "string"
          }
        },
        "required" : [ "language" ]
      },
      "POUPropertySet_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "declaration" : {
            "example" : "VAR\\n   i:INT;\\nEND_VAR",
            "type" : "string"
          },
          "implementation" : {
            "type" : "string"
          }
        },
        "required" : [ "language" ]
      },
      "PreCompileJob_allOf_jobParameters" : {
        "properties" : {
          "action" : {
            "enum" : [ "Disable", "Enable" ],
            "type" : "string"
          }
        }
      },
      "PreCompileJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/PreCompileJob_allOf_jobParameters"
          }
        }
      },
      "ProjectInfo_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "properties" : {
            "$ref" : "#/components/schemas/ProjectInfoproperties"
          }
        }
      },
      "ProjectJob_allOf_jobParameters" : {
        "properties" : {
          "action" : {
            "enum" : [ "Open", "Save", "Close" ],
            "type" : "string"
          },
          "path" : {
            "example" : "C:\\User\\Libraries\\MyLibrary.complied-library or C:\\User\\ABC_Test.project",
            "type" : "string"
          }
        }
      },
      "ProjectJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/ProjectJob_allOf_jobParameters"
          }
        }
      },
      "ProjectSettings_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "displayName" : {
            "description" : "Displayed name in the project",
            "example" : "In english 'Project Settings', in German 'Projekteinstellungen'",
            "readOnly" : true,
            "type" : "string"
          }
        }
      },
      "Recipe_allOf" : {
        "properties" : {
          "variables" : {
            "description" : "List of all variablenames and corresponding values.",
            "items" : {
              "$ref" : "#/components/schemas/RecipeBaseElement"
            },
            "type" : "array"
          }
        }
      },
      "RecipeManager_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "displayName" : {
            "description" : "Displayed name in the project",
            "example" : "Recipe Manager",
            "readOnly" : true,
            "type" : "string"
          },
          "storageType" : {
            "default" : "Textual",
            "enum" : [ "Binary", "Textual" ],
            "type" : "string"
          },
          "filePath" : {
            "type" : "string"
          },
          "fileExtension" : {
            "default" : ".txtrecipe",
            "type" : "string"
          },
          "separator" : {
            "default" : ":=",
            "enum" : [ "Tab", "Semicolon", "Comma", "Space", ":=", "|" ],
            "type" : "string"
          },
          "columnList" : {
            "description" : "Defines which information is saved in which order in the recipe file. (Variable = \"0\", Value = \"1\", Type = \"2\", Name = \"3\", Comment = \"4\", Min = \"5\", Max = \"6\")\n",
            "example" : "0|1",
            "type" : "string"
          },
          "recipeManagementInPlc" : {
            "default" : true,
            "description" : "Must be selected for the user program or visualization elements to load recipes in runtime mode.\n",
            "type" : "boolean"
          },
          "autoSaveRecipe" : {
            "default" : true,
            "type" : "boolean"
          },
          "loadType" : {
            "default" : "ExactVariableList",
            "enum" : [ "ExactVariableList", "MatchingVariableNames" ],
            "type" : "string"
          },
          "writeType" : {
            "default" : "LimitVariablesToMinMax",
            "enum" : [ "LimitVariablesToMinMax", "DoNotWriteMinMaxToVariables" ],
            "type" : "string"
          },
          "checkRecipeForChanges" : {
            "default" : false,
            "type" : "boolean"
          }
        }
      },
      "RecipeVariable_allOf" : {
        "properties" : {
          "additionalName" : {
            "description" : "Additional name of the variable. Caution the \"name\" field in BaseElement is the variable name!",
            "type" : "string"
          },
          "variableType" : {
            "description" : "Type of the plc variable is automatically set",
            "readOnly" : true,
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "lowerBound" : {
            "description" : "If current value of the variable is below LowerBound, the value is set to LowerBound",
            "type" : "string"
          },
          "upperBound" : {
            "description" : "If current value of the variable is higher UpperBound, the value is set to UpperBound",
            "type" : "string"
          },
          "recipies" : {
            "description" : "List of all recipe names and corresponding values.",
            "items" : {
              "$ref" : "#/components/schemas/RecipeBaseElement"
            },
            "type" : "array"
          }
        }
      },
      "SfcEditor_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "flags" : {
            "items" : {
              "$ref" : "#/components/schemas/SfcFlags"
            },
            "type" : "array"
          },
          "build" : {
            "$ref" : "#/components/schemas/SfcBuild"
          },
          "applyToAll" : {
            "description" : "- If set to true, 'SFC Settings' of all pou object(s) of type 'SFC' will be overwritten.\n- By default, in 'SfcEditor' response, this property will be set to true.\n",
            "example" : true,
            "type" : "boolean"
          }
        }
      },
      "SymbolConfig_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "displayName" : {
            "description" : "Displayed name in the project.",
            "example" : "Symbol Configuration",
            "readOnly" : true,
            "type" : "string"
          },
          "includeCommentsInXML" : {
            "description" : "If set to true, 'Include Comments in XML' checkbox will be checked.",
            "example" : true,
            "type" : "boolean"
          },
          "supportOPCUA" : {
            "description" : "If set to true, 'Support OPC UA Features' checkbox will be checked.",
            "example" : true,
            "type" : "boolean"
          },
          "optimizedLayout" : {
            "description" : "If set to true, 'Optimized Layout' will be selected. When set to false 'Compatibility Layout' will be selected.",
            "example" : true,
            "type" : "boolean"
          },
          "symbols" : {
            "description" : "These Symbols are available in 'Symbol Configuration' editor.",
            "items" : {
              "$ref" : "#/components/schemas/Symbol"
            },
            "type" : "array"
          },
          "types" : {
            "description" : "These are the data types referenced in the 'Members' column of 'Symbol Configuration' editor.",
            "items" : {
              "$ref" : "#/components/schemas/Symbol"
            },
            "type" : "array"
          }
        }
      },
      "Task_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "priority" : {
            "description" : "Priority value",
            "example" : "29",
            "type" : "string"
          },
          "taskGroup" : {
            "description" : "Task group name",
            "example" : "IEC-Tasks",
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/TaskType"
          },
          "watchdog" : {
            "$ref" : "#/components/schemas/TaskWatchdog"
          },
          "pouCalls" : {
            "items" : {
              "$ref" : "#/components/schemas/TaskPouCall"
            },
            "type" : "array"
          }
        }
      },
      "TaskConfig_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "displayName" : {
            "description" : "Displayed name in the project",
            "example" : "Task Configuration",
            "readOnly" : true,
            "type" : "string"
          },
          "taskGroups" : {
            "items" : {
              "$ref" : "#/components/schemas/TaskConfigGroup"
            },
            "type" : "array"
          }
        }
      }
    }
  }
}