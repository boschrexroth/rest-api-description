{
  "openapi" : "3.0.2",
  "info" : {
    "contact" : {
      "email" : "support@boschrexroth.com",
      "name" : "Bosch Rexroth AG",
      "url" : "https://www.boschrexroth.com"
    },
    "description" : "The IO Engineering API is used to generate and edit **ctrlX CORE IO configurations** that are used in automatic commissioning.\nRefer [Online Documentation](https://developer.community.boschrexroth.com/t5/Store-and-How-to/Generate-API-client-libraries-from-Engineering-API/ba-p/52314) for API client library generation.\n",
    "title" : "ctrlX IO Engineering API",
    "version" : "2.5.0"
  },
  "servers" : [ {
    "description" : "processes the REST calls",
    "url" : "http://localhost:{port}/io/engineering/api/v2",
    "variables" : {
      "port" : {
        "default" : "##port##",
        "description" : "webserver port number"
      }
    }
  } ],
  "tags" : [ {
    "description" : "This is the Devices view. Here you organize elements for the special devices of the current project.",
    "name" : "Devices"
  }, {
    "description" : "Here you can read and edit the Device repository.",
    "name" : "Device Repositories"
  }, {
    "description" : "Jobs are used to execute and check long running operations such as project open, close.",
    "name" : "Jobs"
  }, {
    "description" : "This is the POUs view. Here you organize general elements of the current project.",
    "name" : "POUs"
  }, {
    "description" : "To get detailed version information of the installed product.",
    "name" : "Product"
  }, {
    "description" : "Here you have general commands for projects.",
    "name" : "Project"
  }, {
    "description" : "Here you can configure the user management for the current project.",
    "name" : "Users and Groups"
  } ],
  "paths" : {
    "/devices" : {
      "get" : {
        "operationId" : "getDevices",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DevicesTopLevel"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the root element of the Devices view",
        "tags" : [ "Devices" ]
      },
      "post" : {
        "operationId" : "addDevices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "devicectrlXCOREIO" : {
                  "$ref" : "#/components/examples/devicectrlXCoreIORequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/DevicesRootElements"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "devicectrlXCOREIO" : {
                    "$ref" : "#/components/examples/devicectrlXCoreIOResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/DevicesRootElements"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to create a new element and append it to the root element of the Devices view",
        "tags" : [ "Devices" ]
      }
    },
    "/devices/{path}" : {
      "delete" : {
        "operationId" : "deleteDevicesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to delete an existing element with all sub-elements",
        "tags" : [ "Devices" ]
      },
      "get" : {
        "operationId" : "getDevicesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "deviceEthercatMaster" : {
                    "$ref" : "#/components/examples/deviceEthercatMasterResponse"
                  },
                  "deviceS20ECBK" : {
                    "$ref" : "#/components/examples/deviceS20ECBKResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/DevicesElements"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get an existing element",
        "tags" : [ "Devices" ]
      },
      "patch" : {
        "operationId" : "modifyDevicesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/merge-patch+json" : {
              "examples" : {
                "devicePlug" : {
                  "$ref" : "#/components/examples/plugDevicePatchRequest"
                },
                "disableDevice" : {
                  "$ref" : "#/components/examples/disableDevicePatchRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/DevicesPatchElements"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/merge-patch+json" : {
                "examples" : {
                  "devicePlug" : {
                    "$ref" : "#/components/examples/plugDevicePatchResponse"
                  },
                  "disableDevice" : {
                    "$ref" : "#/components/examples/deviceS20ECBKResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/DevicesElements"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to modify an resourse of an existing element",
        "tags" : [ "Devices" ]
      },
      "post" : {
        "operationId" : "addDevicesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "deviceEthercatMaster" : {
                  "$ref" : "#/components/examples/deviceEthercatMasterRequest"
                },
                "deviceS20ECBK" : {
                  "$ref" : "#/components/examples/deviceS20ECBKRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/DevicesElements"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "deviceEthercatMaster" : {
                    "$ref" : "#/components/examples/deviceEthercatMasterResponse"
                  },
                  "deviceS20ECBK" : {
                    "$ref" : "#/components/examples/deviceS20ECBKResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/DevicesElements"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to create a new element",
        "tags" : [ "Devices" ]
      },
      "put" : {
        "operationId" : "updateDevicesByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "deviceEthercatMaster" : {
                  "$ref" : "#/components/examples/deviceEthercatMasterRequest"
                },
                "deviceS20ECBK" : {
                  "$ref" : "#/components/examples/deviceS20ECBKRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/DevicesElements"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "deviceEthercatMaster" : {
                    "$ref" : "#/components/examples/deviceEthercatMasterResponse"
                  },
                  "deviceS20ECBK" : {
                    "$ref" : "#/components/examples/deviceS20ECBKResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/DevicesElements"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to modify an existing element",
        "tags" : [ "Devices" ]
      }
    },
    "/device-repositories" : {
      "get" : {
        "operationId" : "getDeviceRepositories",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeviceRepositoryList"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the available device repositories \n",
        "tags" : [ "Device Repositories" ]
      }
    },
    "/device-repositories/{repositoryName}" : {
      "get" : {
        "operationId" : "getDeviceRepositoryByName",
        "parameters" : [ {
          "description" : "Name of the repository",
          "example" : "System Repository",
          "explode" : false,
          "in" : "path",
          "name" : "repositoryName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "To get installed devices matching the query\n",
          "example" : "S20",
          "explode" : true,
          "in" : "query",
          "name" : "find",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeviceList"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the devices installed in the device repository \n- without query parameter: all devices installed in the device repository\n- with query parameter: the devices installed in the device repository matching the query\n",
        "tags" : [ "Device Repositories" ]
      },
      "post" : {
        "operationId" : "addDeviceRepositoryByName",
        "parameters" : [ {
          "description" : "Name of the repository.",
          "example" : "System Repository",
          "explode" : false,
          "in" : "path",
          "name" : "repositoryName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeviceFilePath"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to install devices to the device repository \n",
        "tags" : [ "Device Repositories" ]
      }
    },
    "/device-repositories/{repositoryName}/{deviceName}" : {
      "delete" : {
        "operationId" : "deleteDeviceRepositoryByName",
        "parameters" : [ {
          "example" : "System Repository",
          "explode" : false,
          "in" : "path",
          "name" : "repositoryName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "name of the device to uninstall .\n",
          "example" : "IndraDrive MPC08 (1 CCD Master +5 CCD Slaves)",
          "explode" : false,
          "in" : "path",
          "name" : "deviceName",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "example" : "Revision=16%230000000C",
          "explode" : true,
          "in" : "query",
          "name" : "version",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Examples:65\n",
          "explode" : false,
          "in" : "query",
          "name" : "categories",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "- to uninstall the device from the device repository \n- without query parameter: all devices matching the deviceName are uninstalled from the device repository \n- with query parameter: the devices matching the deviceName and query parameter are uninstalled from the device repository \n",
        "tags" : [ "Device Repositories" ]
      }
    },
    "/jobs" : {
      "get" : {
        "operationId" : "getJobs",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobList"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get all jobs",
        "tags" : [ "Jobs" ]
      },
      "post" : {
        "operationId" : "addJobs",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "exportEthercatConfigJob" : {
                  "$ref" : "#/components/examples/exportEthercatConfigJobrequest"
                },
                "projectJobOpen" : {
                  "$ref" : "#/components/examples/projectJobOpenRequest"
                },
                "projectJobClose" : {
                  "$ref" : "#/components/examples/projectJobCloseRequest"
                },
                "projectJobSave" : {
                  "$ref" : "#/components/examples/projectJobSaveRequest"
                },
                "projectJobSaveAs" : {
                  "$ref" : "#/components/examples/projectJobSaveAsRequest"
                },
                "moveElementsJob" : {
                  "$ref" : "#/components/examples/moveElementsJobRequest"
                },
                "findElementsJob" : {
                  "$ref" : "#/components/examples/findElementsJobRequest"
                },
                "newProjectJob" : {
                  "$ref" : "#/components/examples/newProjectJobRequest"
                },
                "exportJob" : {
                  "$ref" : "#/components/examples/exportJobRequest"
                },
                "importJob" : {
                  "$ref" : "#/components/examples/importJobRequest"
                },
                "exportUsersAndGroupsJob" : {
                  "$ref" : "#/components/examples/exportUsersAndGroupsJobRequest"
                },
                "importUsersAndGroupsJob" : {
                  "$ref" : "#/components/examples/importUsersAndGroupsJobRequest"
                },
                "userManagementLogInJob" : {
                  "$ref" : "#/components/examples/userManagementLogInJobRequest"
                },
                "userManagementLogOutJob" : {
                  "$ref" : "#/components/examples/userManagementLogOutJobRequest"
                },
                "deviceUserLoginJob" : {
                  "$ref" : "#/components/examples/deviceUserLoginJobRequest"
                },
                "deviceUserLogoutJob" : {
                  "$ref" : "#/components/examples/deviceUserLogoutJobRequest"
                },
                "transferFieldbusConfigJob" : {
                  "$ref" : "#/components/examples/transferFieldbusConfigJobRequest"
                },
                "communicationSettingsJob" : {
                  "$ref" : "#/components/examples/communicationSettingsJobRequest"
                },
                "deviceRepositoryJobSaveDevice" : {
                  "$ref" : "#/components/examples/deviceRepositoryJobSaveDeviceRequest"
                },
                "ScanAndMergeDevicesJob" : {
                  "$ref" : "#/components/examples/ScanAndMergeDevicesJobRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Jobs"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Jobs"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to create a new job",
        "tags" : [ "Jobs" ]
      }
    },
    "/jobs/{jobId}" : {
      "get" : {
        "operationId" : "getJobsById",
        "parameters" : [ {
          "description" : "job id",
          "explode" : false,
          "in" : "path",
          "name" : "jobId",
          "required" : true,
          "schema" : {
            "example" : "123",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "exportEthercatConfigJob" : {
                    "$ref" : "#/components/examples/exportEthercatConfigJobresponse"
                  },
                  "projectJobOpen" : {
                    "$ref" : "#/components/examples/projectJobOpenResponse"
                  },
                  "projectJobClose" : {
                    "$ref" : "#/components/examples/projectJobCloseResponse"
                  },
                  "projectJobSave" : {
                    "$ref" : "#/components/examples/projectJobSaveResponse"
                  },
                  "projectJobSaveAs" : {
                    "$ref" : "#/components/examples/projectJobSaveAsResponse"
                  },
                  "moveElementsJob" : {
                    "$ref" : "#/components/examples/moveElementsJobResponse"
                  },
                  "findElementsJob" : {
                    "$ref" : "#/components/examples/findElementsJobResponse"
                  },
                  "newProjectJob" : {
                    "$ref" : "#/components/examples/newProjectJobResponse"
                  },
                  "exportJob" : {
                    "$ref" : "#/components/examples/exportJobResponse"
                  },
                  "importJob" : {
                    "$ref" : "#/components/examples/importJobResponse"
                  },
                  "exportUsersAndGroupsJob" : {
                    "$ref" : "#/components/examples/exportUsersAndGroupsJobResponse"
                  },
                  "importUsersAndGroupsJob" : {
                    "$ref" : "#/components/examples/importUsersAndGroupsJobResponse"
                  },
                  "userManagementLogInJob" : {
                    "$ref" : "#/components/examples/userManagementLogInJobResponse"
                  },
                  "userManagementLogOutJob" : {
                    "$ref" : "#/components/examples/userManagementLogOutJobResponse"
                  },
                  "deviceUserLoginJob" : {
                    "$ref" : "#/components/examples/deviceUserLoginJobResponse"
                  },
                  "deviceUserLogoutJob" : {
                    "$ref" : "#/components/examples/deviceUserLogoutJobResponse"
                  },
                  "transferFieldbusConfigJob" : {
                    "$ref" : "#/components/examples/transferFieldbusConfigJobResponse"
                  },
                  "communicationSettingsJob" : {
                    "$ref" : "#/components/examples/communicationSettingsJobResponse"
                  },
                  "deviceRepositoryJobSaveDevice" : {
                    "$ref" : "#/components/examples/deviceRepositoryJobSaveDeviceResponse"
                  },
                  "ScanAndMergeDevicesJob" : {
                    "$ref" : "#/components/examples/ScanAndMergeDevicesJobResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Jobs"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get information of an existing job",
        "tags" : [ "Jobs" ]
      }
    },
    "/pous" : {
      "get" : {
        "operationId" : "getPous",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PousTopLevel"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the root element of the POUs view",
        "tags" : [ "POUs" ]
      }
    },
    "/pous/{path}" : {
      "get" : {
        "operationId" : "getPousByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "usersAndGroupsEditor" : {
                    "$ref" : "#/components/examples/usersAndGroupsEditorResponse"
                  },
                  "projectSettings" : {
                    "$ref" : "#/components/examples/projectSettingsResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/PousElements"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get an existing element",
        "tags" : [ "POUs" ]
      },
      "put" : {
        "operationId" : "updatePousByPath",
        "parameters" : [ {
          "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
          "explode" : false,
          "in" : "path",
          "name" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "usersAndGroupsEditor" : {
                  "$ref" : "#/components/examples/usersAndGroupsEditorRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/PousElements"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "usersAndGroupsEditor" : {
                    "$ref" : "#/components/examples/usersAndGroupsEditorResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/PousElements"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to modify an existing element",
        "tags" : [ "POUs" ]
      }
    },
    "/product/info" : {
      "get" : {
        "operationId" : "getProductInfo",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the product information",
        "tags" : [ "Product" ]
      }
    },
    "/projects/current" : {
      "get" : {
        "operationId" : "getCurrentProject",
        "parameters" : [ {
          "description" : "kind of data of the current project",
          "explode" : true,
          "in" : "query",
          "name" : "option",
          "required" : false,
          "schema" : {
            "default" : "meta",
            "enum" : [ "meta", "extended" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get the meta information or a list of elements of the current project",
        "tags" : [ "Project" ]
      }
    },
    "/pous/project-settings/users-groups/user" : {
      "post" : {
        "operationId" : "addUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "user" : {
                  "$ref" : "#/components/examples/addUserRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "user" : {
                    "$ref" : "#/components/examples/userResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to create new user account in the current project\n",
        "tags" : [ "Users and Groups" ]
      }
    },
    "/pous/project-settings/users-groups/user/{userName}" : {
      "delete" : {
        "operationId" : "deleteUserByName",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "userName",
          "required" : true,
          "schema" : {
            "example" : "Owner",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to delete user account from the current project",
        "tags" : [ "Users and Groups" ]
      },
      "get" : {
        "operationId" : "getUserInfoByPath",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "userName",
          "required" : true,
          "schema" : {
            "example" : "Owner",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "user" : {
                    "$ref" : "#/components/examples/userResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get user properties",
        "tags" : [ "Users and Groups" ]
      },
      "put" : {
        "operationId" : "updateUserByName",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "userName",
          "required" : true,
          "schema" : {
            "example" : "Owner",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "user" : {
                  "$ref" : "#/components/examples/editUserRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "user" : {
                    "$ref" : "#/components/examples/userResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to update the properties of the user .",
        "tags" : [ "Users and Groups" ]
      }
    },
    "/pous/project-settings/users-groups/group" : {
      "post" : {
        "operationId" : "addGroup",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "group" : {
                  "$ref" : "#/components/examples/addGroupRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Group"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "group" : {
                    "$ref" : "#/components/examples/groupResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to create new group in the current project\n",
        "tags" : [ "Users and Groups" ]
      }
    },
    "/pous/project-settings/users-groups/group/{groupName}" : {
      "delete" : {
        "operationId" : "deleteGroupByName",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "groupName",
          "required" : true,
          "schema" : {
            "example" : "Everyone",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to delete group from the current project",
        "tags" : [ "Users and Groups" ]
      },
      "get" : {
        "operationId" : "getGroupInfoByName",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "groupName",
          "required" : true,
          "schema" : {
            "example" : "Everyone",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "group" : {
                    "$ref" : "#/components/examples/groupResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to get group properties",
        "tags" : [ "Users and Groups" ]
      },
      "put" : {
        "operationId" : "updateGroupByName",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "groupName",
          "required" : true,
          "schema" : {
            "example" : "Everyone",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "group" : {
                  "$ref" : "#/components/examples/addGroupRequest"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Group"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "group" : {
                    "$ref" : "#/components/examples/groupResponse"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The request is incomplete or malformed"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Access forbidden for this resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "The resource was not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Something unexpected happened on the server"
          }
        },
        "summary" : "to update the properties of the group .",
        "tags" : [ "Users and Groups" ]
      }
    }
  },
  "components" : {
    "examples" : {
      "addGroupRequest" : {
        "value" : {
          "name" : "group1",
          "elementType" : "Group",
          "description" : "IO group",
          "members" : [ "user Owner" ]
        }
      },
      "addUserRequest" : {
        "value" : {
          "name" : "user1",
          "elementType" : "User",
          "fullName" : "IO User",
          "description" : "All rights",
          "password" : "a",
          "confirmPassword" : "a",
          "active" : true,
          "memberships" : [ "Owner" ]
        }
      },
      "devicectrlXCoreIORequest" : {
        "value" : {
          "name" : "ctrlX_CORE_IO",
          "elementType" : "Device",
          "deviceInfo" : {
            "name" : "ctrlX CORE I/O Configuration",
            "vendor" : "Bosch Rexroth AG",
            "deviceType" : 4096,
            "id" : "1001 0090"
          }
        }
      },
      "devicectrlXCoreIOResponse" : {
        "value" : {
          "name" : "ctrlX_CORE_IO",
          "elementType" : "Device",
          "id" : "31fd18ab-b87d-4cd4-8ef9-1f04d21f247a",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "isOnline" : false,
          "disable" : false,
          "deviceInfo" : {
            "name" : "ctrlX CORE I/O Configuration",
            "vendor" : "Bosch Rexroth AG",
            "deviceType" : 4096,
            "id" : "1001 0090",
            "version" : "1.8.0.0",
            "orderNumber" : "",
            "description" : "ctrlX CORE I/O Configuration"
          }
        }
      },
      "deviceEthercatMasterRequest" : {
        "value" : {
          "name" : "ethercatmaster",
          "elementType" : "Device",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "deviceInfo" : {
            "name" : "EtherCAT Master",
            "vendor" : "Bosch Rexroth AG",
            "deviceType" : 64,
            "id" : "1001 0101"
          }
        }
      },
      "deviceEthercatMasterResponse" : {
        "value" : {
          "name" : "ethercatmaster",
          "elementType" : "Device",
          "id" : "ca0ea7d6-517e-40a2-ac80-a1f5abd33e68",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "disable" : false,
          "deviceInfo" : {
            "name" : "EtherCAT Master",
            "vendor" : "Bosch Rexroth AG",
            "deviceType" : 64,
            "id" : "1001 0101",
            "version" : "1.8.0.0",
            "orderNumber" : "",
            "description" : "EtherCAT Master\r\n\t  \r\nEtherCAT® is a registered trademark and patented technology, licensed by Beckhoff Automation GmbH, Germany."
          }
        }
      },
      "deviceS20ECBKRequest" : {
        "value" : {
          "name" : "S20_EC_BK",
          "elementType" : "Device",
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "deviceInfo" : {
            "deviceType" : 65,
            "id" : "24_00293C6000000001",
            "version" : "Revision=16#00000001"
          },
          "ioMapping" : [ {
            "variable" : "",
            "address" : "%IW0",
            "automatic" : true,
            "channelName" : "New Diagnosis Message",
            "baseType" : "UINT",
            "ioType" : "Input",
            "subChannels" : [ ]
          } ]
        }
      },
      "deviceS20ECBKResponse" : {
        "value" : {
          "name" : "S20_EC_BK",
          "elementType" : "Device",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "disable" : false,
          "ethercatSlaveInfo" : {
            "ethercatAddress" : 1001
          },
          "deviceInfo" : {
            "name" : "S20-EC-BK, IndraControl S20 EtherCAT Fieldbus coupler",
            "vendor" : "Bosch Rexroth AG",
            "deviceType" : 65,
            "id" : "24_00293C6000000001",
            "version" : "Revision=16#00000001",
            "orderNumber" : "S20-EC-BK",
            "description" : "EtherCAT Slave imported from Slave XML: S20-EC-BK_019.XML Device: S20-EC-BK, IndraControl S20 EtherCAT BuskopplerS20-EC-BK, IndraControl S20 EtherCAT Fieldbus coupler"
          },
          "ioMapping" : [ {
            "variable" : "",
            "address" : "%IW0",
            "automatic" : true,
            "channelName" : "New Diagnosis Message",
            "baseType" : "UINT",
            "ioType" : "Input",
            "subChannels" : [ ]
          }, {
            "variable" : "",
            "address" : "%IW2",
            "automatic" : true,
            "channelName" : "Localbus bus State",
            "baseType" : "UINT",
            "ioType" : "Input",
            "subChannels" : [ ]
          }, {
            "variable" : "",
            "address" : "%IW4",
            "automatic" : true,
            "channelName" : "Localbus Error_Code",
            "baseType" : "UINT",
            "ioType" : "Input",
            "subChannels" : [ ]
          }, {
            "variable" : "",
            "address" : "%IW6",
            "automatic" : true,
            "channelName" : "Localbus Add_Error Info",
            "baseType" : "UINT",
            "ioType" : "Input",
            "subChannels" : [ ]
          } ]
        }
      },
      "disableDevicePatchRequest" : {
        "value" : {
          "disable" : false
        }
      },
      "editUserRequest" : {
        "value" : {
          "name" : "user1",
          "elementType" : "User",
          "fullName" : "IO user",
          "description" : "no rights",
          "oldPassword" : "a",
          "password" : "boschrexroth",
          "confirmPassword" : "boschrexroth",
          "active" : false,
          "memberships" : [ "Owner" ]
        }
      },
      "exportJobRequest" : {
        "value" : {
          "jobType" : "ExportJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/ctrlX_CORE_IO/ethercatmaster",
            "filePath" : "X:\\ctrlX\\Projects\\ImportExport",
            "fileName" : "ethercatmaster.export",
            "oneFilePerSubtree" : false
          }
        }
      },
      "exportJobResponse" : {
        "value" : {
          "id" : "ba4083cffdb6e56f",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ExportJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/ctrlX_CORE_IO/ethercatmaster",
            "filePath" : "X:\\ctrlX\\Projects\\ImportExport",
            "fileName" : "ethercatmaster.export",
            "oneFilePerSubtree" : false
          },
          "jobResultInfo" : "Export successful."
        }
      },
      "exportEthercatConfigJobrequest" : {
        "value" : {
          "jobType" : "ExportEthercatConfigJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/Device/ethercatmaster",
            "filePath" : "D:\\Test\\",
            "fileName" : "Ethercat.xml"
          }
        }
      },
      "exportEthercatConfigJobresponse" : {
        "value" : {
          "id" : "55ecc8d36ed0e5ad",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ExportEthercatConfigJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/Device/ethercatmaster",
            "filePath" : "D:\\Test\\",
            "fileName" : "Ethercat.xml"
          },
          "jobResultInfo" : "File 'Ethercat.xml' successfully exported."
        }
      },
      "exportUsersAndGroupsJobRequest" : {
        "value" : {
          "jobType" : "ExportUsersAndGroupsJob",
          "jobParameters" : {
            "filePath" : "D:\\Test",
            "fileName" : "userAndGroups"
          }
        }
      },
      "exportUsersAndGroupsJobResponse" : {
        "value" : {
          "id" : "27e1c833c44d7217",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ExportUsersAndGroupsJob",
          "jobParameters" : {
            "filePath" : "D:\\Test",
            "fileName" : "userAndGroups"
          },
          "jobResultInfo" : "Exported '1' users,'2' groups and '2' memberships"
        }
      },
      "findElementsJobRequest" : {
        "value" : {
          "jobType" : "FindElementsJob",
          "jobParameters" : {
            "nodeUrl" : "/devices",
            "findText" : "ctrlX_DRIVE_Powersupply_SoE_",
            "findId" : "0ac0a639-1834-4e05-af0b-929ab7b95ab7",
            "matchCase" : false,
            "matchWholeWord" : false,
            "searchOptions" : "NodeAndSubNodes"
          }
        }
      },
      "findElementsJobResponse" : {
        "value" : {
          "id" : "54876e19698da35b",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "FindElementsJob",
          "jobParameters" : {
            "nodeUrl" : "/devices",
            "findText" : "ctrlX_DRIVE_Powersupply_SoE_",
            "findId" : "0ac0a639-1834-4e05-af0b-929ab7b95ab7",
            "matchCase" : false,
            "matchWholeWord" : false,
            "searchOptions" : "NodeAndSubNodes",
            "matchedNodeUrls" : [ "/devices/Device/ethercatmaster/ctrlX_DRIVE_Powersupply_SoE_" ]
          },
          "jobResultInfo" : "FindElements Job completed successfully "
        }
      },
      "groupResponse" : {
        "value" : {
          "name" : "group1",
          "elementType" : "Group",
          "id" : null,
          "children" : [ ],
          "elementProperties" : { },
          "description" : "IO group",
          "members" : [ "user 'Owner'" ]
        }
      },
      "importJobRequest" : {
        "value" : {
          "jobType" : "ImportJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/ctrlX_CORE_IO",
            "filePath" : "X:\\ctrlX\\Projects\\ImportExport",
            "fileName" : "ethercatmaster.export"
          }
        }
      },
      "importJobResponse" : {
        "value" : {
          "id" : "e4b42ce463540d68",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ImportJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/ctrlX_CORE_IO",
            "filePath" : "X:\\ctrlX\\Projects\\ImportExport",
            "fileName" : "ethercatmaster.export"
          },
          "jobResultInfo" : "File 'ethercatmaster.export'  successfully Imported. "
        }
      },
      "importUsersAndGroupsJobRequest" : {
        "value" : {
          "jobType" : "ImportUsersAndGroupsJob",
          "jobParameters" : {
            "filePath" : "D:\\Test",
            "fileName" : "userAndGroups"
          }
        }
      },
      "importUsersAndGroupsJobResponse" : {
        "value" : {
          "id" : "98687ccdcb4534b1",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ImportUsersAndGroupsJob",
          "jobParameters" : {
            "filePath" : "D:\\Test",
            "fileName" : "userAndGroups"
          },
          "jobResultInfo" : "Imported 1 users,0 groups and 0 memberships"
        }
      },
      "moveElementsJobRequest" : {
        "value" : {
          "jobType" : "MoveElementsJob",
          "jobParameters" : {
            "sourceNodeUrl" : "/devices/Device/ethercatmaster/ctrlX_DRIVE_Powersupply_SoE_1",
            "destinationNodeUrl" : "/devices/ctrlX_CORE_IO/ethercatmaster",
            "insertPosition" : 2
          }
        }
      },
      "moveElementsJobResponse" : {
        "value" : {
          "id" : "31a43fb7ad83edf3",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "MoveElementsJob",
          "jobParameters" : {
            "sourceNodeUrl" : "/devices/Device/ethercatmaster/ctrlX_DRIVE_Powersupply_SoE_1",
            "destinationNodeUrl" : "/devices/ctrlX_CORE_IO/ethercatmaster",
            "insertPosition" : 2
          },
          "jobResultInfo" : "Elements moved successfully."
        }
      },
      "newProjectJobRequest" : {
        "value" : {
          "jobType" : "NewProjectJob",
          "jobParameters" : {
            "filePath" : "D:\\test",
            "fileName" : "untitled1",
            "template" : "ctrlXCOREIO"
          }
        }
      },
      "newProjectJobResponse" : {
        "value" : {
          "id" : "fc599c58a032a2d1",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "NewProjectJob",
          "jobParameters" : {
            "filePath" : "D:\\test",
            "fileName" : "untitled1",
            "template" : "ctrlXCOREIO"
          },
          "jobResultInfo" : "Project untitled1 successfully created at D:\\test."
        }
      },
      "plugDevicePatchRequest" : {
        "value" : {
          "deviceFunction" : "plug",
          "deviceType" : 68,
          "deviceId" : "10000E8_00002302__r/w head, 4 bytes I/O",
          "deviceVersion" : "0",
          "deviceName" : "RFID_Ch_4"
        }
      },
      "plugDevicePatchResponse" : {
        "value" : {
          "name" : "RFID_Ch_4",
          "elementType" : "Device",
          "children" : [ ],
          "elementProperties" : {
            "build" : {
              "excludeFromBuild" : false,
              "external" : false,
              "enableSystemCall" : false,
              "linkAlways" : false,
              "compilerDefines" : ""
            }
          },
          "deviceInfo" : {
            "name" : "RFID r/w head, 4 bytes I/O",
            "vendor" : "Balluff GmbH",
            "deviceType" : 68,
            "id" : "10000E8_00002302__r/w head, 4 bytes I/O",
            "version" : "0",
            "orderNumber" : "r/w head, 4 bytes I/O",
            "description" : "EtherCAT Module imported from Slave XML: Balluff_RFID_Modules_130204.xml Device: RFID r/w head, 4 bytes I/O"
          },
          "ioMapping" : [ {
            "variable" : "",
            "address" : "%QB32",
            "automatic" : true,
            "channelName" : "output byte 0",
            "baseType" : "ARRAY [0..0] OF BYTE",
            "ioType" : "Output",
            "subChannels" : [ {
              "variable" : "",
              "address" : "%QB32",
              "automatic" : true,
              "channelName" : "output byte 0",
              "baseType" : "BYTE",
              "ioType" : null,
              "subChannels" : [ ]
            } ]
          } ]
        }
      },
      "projectJobCloseRequest" : {
        "value" : {
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Close"
          }
        }
      },
      "projectJobCloseResponse" : {
        "value" : {
          "id" : "7763a247496b36b3",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Close"
          },
          "jobResultInfo" : "Project successfully closed."
        }
      },
      "projectJobOpenRequest" : {
        "value" : {
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Open",
            "path" : "C:\\Users\\Documents\\My ctrlX\\io11.project",
            "keepProjectVersion" : false
          }
        }
      },
      "projectJobOpenResponse" : {
        "value" : {
          "id" : "e49c3a2655e72a93",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Open",
            "path" : "C:\\Users\\Documents\\My ctrlX\\io11.project",
            "keepProjectVersion" : false
          },
          "jobResultInfo" : "Project ' at C:\\Users\\Documents\\My ctrlX\\io11.project.' successfully opened."
        }
      },
      "projectJobSaveAsRequest" : {
        "value" : {
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Save",
            "path" : "C:\\Users\\Documents\\My ctrlX\\ioeng.project"
          }
        }
      },
      "projectJobSaveAsResponse" : {
        "value" : {
          "id" : "d38a56e5945c9367",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Save",
            "path" : "C:\\Users\\Documents\\My ctrlX\\ioeng.project"
          },
          "jobResultInfo" : "Project successfully saved at C:\\Users\\Documents\\My ctrlX\\ioeng.project."
        }
      },
      "projectJobSaveRequest" : {
        "value" : {
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Save"
          }
        }
      },
      "projectJobSaveResponse" : {
        "value" : {
          "id" : "31e47543806f299e",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ProjectJob",
          "jobParameters" : {
            "action" : "Save"
          },
          "jobResultInfo" : "Project successfully saved."
        }
      },
      "userManagementLogInJobRequest" : {
        "value" : {
          "jobType" : "UserManagementLogInJob",
          "jobParameters" : {
            "userName" : "Owner",
            "password" : ""
          }
        }
      },
      "userManagementLogInJobResponse" : {
        "value" : {
          "id" : "9df41385e6dd663d",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "UserManagementLogInJob",
          "jobParameters" : {
            "userName" : "Owner",
            "password" : ""
          },
          "jobResultInfo" : "User 'Owner' successfully logged in"
        }
      },
      "userManagementLogOutJobRequest" : {
        "value" : {
          "jobType" : "UserManagementLogOutJob"
        }
      },
      "userManagementLogOutJobResponse" : {
        "value" : {
          "id" : "505d51276f9e9061",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "UserManagementLogOutJob",
          "jobParameters" : null,
          "jobResultInfo" : "Logout is successful."
        }
      },
      "userResponse" : {
        "value" : {
          "name" : "user1",
          "elementType" : "User",
          "id" : null,
          "children" : [ ],
          "elementProperties" : { },
          "fullName" : "IO User",
          "description" : "All rights",
          "oldPassword" : "********************************",
          "password" : "********************************",
          "confirmPassword" : "********************************",
          "active" : true,
          "memberships" : [ "Everyone", "Owner" ]
        }
      },
      "usersAndGroupsEditorResponse" : {
        "value" : {
          "name" : "Users and Groups",
          "elementType" : "UsersAndGroupsEditor",
          "id" : null,
          "children" : [ ],
          "elementProperties" : { },
          "users" : [ {
            "name" : "Owner",
            "fullName" : "",
            "description" : "",
            "active" : true,
            "memberships" : [ "Everyone", "Owner" ]
          } ],
          "groups" : [ {
            "name" : "Everyone",
            "description" : "",
            "members" : [ "user 'Owner'" ]
          }, {
            "name" : "Owner",
            "description" : "",
            "members" : [ "user 'Owner'" ]
          } ],
          "settings" : {
            "maximumAuthenticationTrials" : {
              "checked" : true,
              "value" : 3
            },
            "logoutAfterTimeOfInactivity" : {
              "checked" : true,
              "value" : 10
            },
            "enableHashFormatPassword" : false
          }
        }
      },
      "usersAndGroupsEditorRequest" : {
        "value" : {
          "name" : "Users and Groups",
          "elementType" : "UsersAndGroupsEditor",
          "settings" : {
            "maximumAuthenticationTrials" : {
              "checked" : true,
              "value" : 5
            },
            "logoutAfterTimeOfInactivity" : {
              "checked" : true,
              "value" : 1
            },
            "enableHashFormatPassword" : false
          }
        }
      },
      "deviceUserLoginJobRequest" : {
        "value" : {
          "jobType" : "DeviceUserLoginJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/Device",
            "username" : "boschrexroth",
            "password" : "boschrexroth"
          }
        }
      },
      "deviceUserLoginJobResponse" : {
        "value" : {
          "id" : "99b92fce667b36e1",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "DeviceUserLoginJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/Device",
            "username" : "boschrexroth",
            "password" : "boschrexroth"
          },
          "jobResultInfo" : "DeviceUserLoginJob is successful."
        }
      },
      "deviceUserLogoutJobRequest" : {
        "value" : {
          "jobType" : "DeviceUserLogoutJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/Device"
          }
        }
      },
      "deviceUserLogoutJobResponse" : {
        "value" : {
          "id" : "999181b473e75cd6",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "DeviceUserLogoutJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/Device"
          },
          "jobResultInfo" : "DeviceUserLogoutJob is successful."
        }
      },
      "deviceRepositoryJobSaveDeviceRequest" : {
        "value" : {
          "jobType" : "DeviceRepositoryJob",
          "jobParameters" : {
            "action" : "SaveDevice"
          }
        }
      },
      "deviceRepositoryJobSaveDeviceResponse" : {
        "value" : {
          "id" : "3d2fad188a4aadf4",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "DeviceRepositoryJob",
          "jobParameters" : {
            "action" : "SaveDevice"
          },
          "jobResultInfo" : "Changes to devices are successfully saved."
        }
      },
      "transferFieldbusConfigJobRequest" : {
        "value" : {
          "jobType" : "TransferFieldbusConfigJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/Device/ethercatmaster",
            "allowSwitchState" : true
          }
        }
      },
      "transferFieldbusConfigJobResponse" : {
        "value" : {
          "id" : "18fbfba62daf663f",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "TransferFieldbusConfigJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/Device/ethercatmaster",
            "allowSwitchState" : true
          },
          "jobResultInfo" : "TransferFieldbusConfigJob completed successfully ."
        }
      },
      "communicationSettingsJobRequest" : {
        "value" : {
          "jobType" : "CommunicationSettingsJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/Device",
            "ipAddress" : "10.52.245.95"
          }
        }
      },
      "communicationSettingsJobResponse" : {
        "value" : {
          "id" : "8116a6eb4e58c84d",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "CommunicationSettingsJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/Device",
            "ipAddress" : "10.52.245.95"
          },
          "jobResultInfo" : "CommunicationSettingsJob is successful"
        }
      },
      "projectSettingsResponse" : {
        "value" : {
          "name" : "project-settings",
          "displayName" : "Project Settings",
          "elementType" : "ProjectSettings",
          "id" : "6470a90f-b7cb-43ac-9ae5-94b2338b4573",
          "children" : [ "Source Download", "Library development", "Compiler warnings", "Compile options", "users-groups", "Security", "Page Setup" ],
          "elementProperties" : { }
        }
      },
      "ScanAndMergeDevicesJobRequest" : {
        "value" : {
          "jobType" : "ScanAndMergeDevicesJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/ctrlX_CORE_IO/ethercatmaster"
          }
        }
      },
      "ScanAndMergeDevicesJobResponse" : {
        "value" : {
          "id" : "866ed5e244e62593",
          "state" : "Done",
          "progress" : 100,
          "jobType" : "ScanAndMergeDevicesJob",
          "jobParameters" : {
            "nodeUrl" : "/devices/ctrlX_CORE_IO/ethercatmaster"
          },
          "jobResultInfo" : "Devices are scanned and merged to project successfully."
        }
      }
    },
    "parameters" : {
      "path" : {
        "description" : "This is the path to the element.\n- The char \".\" is not allowed in the name, because it is used in case of ambiguity.\n- If there is an ambiguity between different element names, you can address the element by the option \"name.type\"\n\n  Example: A Folder \"TestName\" with the path: `PickingUnit/TestName.Folder` and a POU \"TestName\" with the path: `PickingUnit/TestName.POU`\n",
        "explode" : false,
        "in" : "path",
        "name" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "jobId" : {
        "description" : "job id",
        "explode" : false,
        "in" : "path",
        "name" : "jobId",
        "required" : true,
        "schema" : {
          "example" : "123",
          "type" : "string"
        },
        "style" : "simple"
      },
      "name" : {
        "description" : "This is the name of a recipeVariable or a recipe.\n",
        "explode" : false,
        "in" : "path",
        "name" : "name",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "userName" : {
        "explode" : false,
        "in" : "path",
        "name" : "userName",
        "required" : true,
        "schema" : {
          "example" : "Owner",
          "type" : "string"
        },
        "style" : "simple"
      },
      "groupName" : {
        "explode" : false,
        "in" : "path",
        "name" : "groupName",
        "required" : true,
        "schema" : {
          "example" : "Everyone",
          "type" : "string"
        },
        "style" : "simple"
      }
    },
    "responses" : {
      "BadRequest" : {
        "$ref" : "./common/responses/BadRequest.yaml#/BadRequest"
      },
      "Unauthorized" : {
        "$ref" : "./common/responses/Unauthorized.yaml#/Unauthorized"
      },
      "Forbidden" : {
        "$ref" : "./common/responses/Forbidden.yaml#/Forbidden"
      },
      "NotFound" : {
        "$ref" : "./common/responses/NotFound.yaml#/NotFound"
      },
      "InternalServerError" : {
        "$ref" : "./common/responses/InternalServerError.yaml#/InternalServerError"
      }
    },
    "schemas" : {
      "BaseElement" : {
        "description" : "BaseElement is an abstraction level with the basic properties. The property \"elementType\" is mandatory. It is equal to the name of the schema\n",
        "discriminator" : {
          "propertyName" : "elementType"
        },
        "properties" : {
          "elementType" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "id" : {
            "description" : "Globally Unique Identifier (GUID) of an element. Top level 'Devices' & 'POUs' return null.",
            "readOnly" : true,
            "type" : "string"
          },
          "children" : {
            "description" : "The array children contains each name of the child-elements.\n\nIf there are elements with identical names, the elementType will be added to the name. \nFor Example:            \n- \"test.Folder\"\n",
            "items" : {
              "type" : "string"
            },
            "readOnly" : true,
            "type" : "array"
          }
        },
        "required" : [ "elementType" ],
        "type" : "object"
      },
      "Build" : {
        "properties" : {
          "excludeFromBuild" : {
            "type" : "boolean"
          },
          "external" : {
            "type" : "boolean"
          },
          "enableSystemCall" : {
            "type" : "boolean"
          },
          "linkAlways" : {
            "type" : "boolean"
          },
          "compilerDefines" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "ChannelInfo" : {
        "properties" : {
          "ioType" : {
            "enum" : [ "Input", "Output" ],
            "type" : "string"
          },
          "variable" : {
            "example" : "Application.IO_PRG.idx",
            "type" : "string"
          },
          "channelName" : {
            "example" : "AT.Power_supply_status_word",
            "type" : "string"
          },
          "baseType" : {
            "example" : "WORD",
            "type" : "string"
          },
          "address" : {
            "example" : "%IW0",
            "type" : "string"
          },
          "automatic" : {
            "type" : "boolean"
          },
          "description" : {
            "example" : "output byte 0/Localbus Error_Code",
            "type" : "string"
          },
          "subChannels" : {
            "description" : "Array of ChannelInfo",
            "items" : {
              "$ref" : "#/components/schemas/ChannelInfo"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "CommunicationSettingsJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/CommunicationSettingsJob_allOf"
        } ],
        "description" : "The job connects IO Engineering to the device.\n"
      },
      "Device" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/Device_allOf"
        } ]
      },
      "DeviceFilePath" : {
        "description" : "path to the device file .\n",
        "example" : {
          "path" : "D:\\Ethercat_DeviceDescriptions\\Rexroth\\S20-EC-BK_013.xml"
        },
        "properties" : {
          "path" : {
            "example" : "D:\\Ethercat_DeviceDescriptions\\Rexroth\\S20-EC-BK_013.xml",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "DeviceInfo" : {
        "description" : "-  General information that originates from the device description file\n-  These information are shown in the tab 'Information' of the device editor\n",
        "properties" : {
          "name" : {
            "example" : "S20-EC-BK, IndraControl S20 EtherCAT Fieldbus coupler",
            "type" : "string"
          },
          "vendor" : {
            "example" : "Bosch Rexroth AG",
            "type" : "string"
          },
          "deviceType" : {
            "example" : 65,
            "type" : "integer"
          },
          "id" : {
            "example" : "24_00293C6000000001",
            "type" : "string"
          },
          "version" : {
            "description" : "If version information is not given, newest version is selected automatically.",
            "example" : "Revision=16#00000001",
            "type" : "string"
          },
          "orderNumber" : {
            "example" : "S20-EC-BK",
            "type" : "string"
          },
          "description" : {
            "example" : "EtherCAT Slave imported from Slave XML: S20-EC-BK_019.XML Device: S20-EC-BK, IndraControl S20 EtherCAT BuskopplerS20-EC-BK, IndraControl S20 EtherCAT Fieldbus coupler",
            "type" : "string"
          }
        },
        "required" : [ "deviceType", "id" ],
        "type" : "object"
      },
      "DeviceList" : {
        "description" : "a list of installed devices",
        "example" : {
          "installedDevices" : [ {
            "deviceType" : 68,
            "additionalFiles" : [ {
              "path" : "C:\\ProgramData\\Rexroth\\ctrlX WORKS\\1\\Studio\\Devices\\64\\1001 0101\\1.2.0\\BoschRexroth_ControlX_EtherCAT_Master_Diag-1.2.0.0.xml",
              "key" : "Common.File.XML.NativeDescription"
            }, {
              "path" : "C:\\ProgramData\\Rexroth\\ctrlX WORKS\\1\\Studio\\Devices\\64\\1001 0101\\1.2.0\\BoschRexroth_ControlX_EtherCAT_Master_Diag-1.2.0.0.xml",
              "key" : "Common.File.XML.NativeDescription"
            } ],
            "vendor" : "Bosch Rexroth AG",
            "name" : "IndraDrive MPC08 (1 CCD Master +5 CCD Slaves)",
            "description" : "description",
            "categories" : [ "65", "65" ],
            "id" : "24_00000100__242C04",
            "version" : "Revision=16#00000004"
          }, {
            "deviceType" : 68,
            "additionalFiles" : [ {
              "path" : "C:\\ProgramData\\Rexroth\\ctrlX WORKS\\1\\Studio\\Devices\\64\\1001 0101\\1.2.0\\BoschRexroth_ControlX_EtherCAT_Master_Diag-1.2.0.0.xml",
              "key" : "Common.File.XML.NativeDescription"
            }, {
              "path" : "C:\\ProgramData\\Rexroth\\ctrlX WORKS\\1\\Studio\\Devices\\64\\1001 0101\\1.2.0\\BoschRexroth_ControlX_EtherCAT_Master_Diag-1.2.0.0.xml",
              "key" : "Common.File.XML.NativeDescription"
            } ],
            "vendor" : "Bosch Rexroth AG",
            "name" : "IndraDrive MPC08 (1 CCD Master +5 CCD Slaves)",
            "description" : "description",
            "categories" : [ "65", "65" ],
            "id" : "24_00000100__242C04",
            "version" : "Revision=16#00000004"
          } ],
          "repositoryName" : "repositoryName"
        },
        "properties" : {
          "repositoryName" : {
            "type" : "string"
          },
          "installedDevices" : {
            "items" : {
              "$ref" : "#/components/schemas/InstalledDeviceBasics"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "DevicePlug" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/DevicePlug_allOf"
        } ],
        "description" : "Plug device to an empty slot."
      },
      "DevicesElements" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/Device"
        } ]
      },
      "DevicesRootElements" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/Device"
        } ]
      },
      "DeviceRepositoryJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/DeviceRepositoryJob_allOf"
        } ],
        "description" : "Saves the current devices in the device cache. Use after adding or removing many devices.",
        "type" : "object"
      },
      "DeviceRepositoryList" : {
        "example" : {
          "repositories" : [ "System Repository", "System Repository" ]
        },
        "properties" : {
          "repositories" : {
            "items" : {
              "example" : "System Repository",
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "DevicesPatchElements" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/DevicePlug"
        }, {
          "$ref" : "#/components/schemas/DisableDevice"
        } ]
      },
      "DevicesTopLevel" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        } ],
        "description" : "Top level **Devices** view in IO Engineering."
      },
      "DisableDevice" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/DisableDevice_allOf"
        } ],
        "description" : "Disable or Enable the device. If set to **true**, device will be disabled. Should be used with **PATCH** request only."
      },
      "DeviceUserLoginJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/DeviceUserLoginJob_allOf"
        } ],
        "description" : "The job logins the user to the device.\n"
      },
      "DeviceUserLogoutJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/DeviceUserLogoutJob_allOf"
        } ],
        "description" : "The job logout the device user.\n"
      },
      "Ecad" : {
        "properties" : {
          "id" : {
            "description" : "Resource identifier of an ECAD system.",
            "example" : "BK_12$&_example_name",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "ElementProperties" : {
        "properties" : {
          "build" : {
            "$ref" : "#/components/schemas/Build"
          },
          "ecad" : {
            "$ref" : "#/components/schemas/Ecad"
          }
        },
        "type" : "object"
      },
      "EthercatSlaveInfo" : {
        "description" : "Includes the general information of the ethercat slave.",
        "properties" : {
          "ethercatAddress" : {
            "description" : "EtherCAT address of the slave, also called Fixed Physical Address. The address is not saved in the slave, but the master assigns this address to the slave upon bus startup.",
            "example" : 1001,
            "type" : "integer"
          }
        },
        "readOnly" : true,
        "type" : "object"
      },
      "ExportJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/ExportJob_allOf"
        } ],
        "description" : "The job 'ExportJob' is used to export the specified node and its children if any to '.export' file format.\n"
      },
      "ExportEthercatConfigJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/ExportEthercatConfigJob_allOf"
        } ],
        "description" : "The job 'ExportEthercatConfigJob' is used to export the specified 'Ethercat' node and its children if any to the file.\n"
      },
      "ExportUsersAndGroupsJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/ExportUsersAndGroupsJob_allOf"
        } ],
        "description" : "The job 'ExportUsersAndGroupsJob' is used to export users and groups definitions of the project in a file *.users xml format.\n"
      },
      "FindElementsJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/FindElementsJob_allOf"
        } ],
        "description" : "- The job 'FindElementsJob' is used to search for all the occurence of an element starting from a node including the corresponding subnodes. Search will be based on 'findText' or 'findId'.\n- If both findText and findId are given, then it searches for the node which matches both id and text.\n"
      },
      "Group" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/Group_allOf"
        } ]
      },
      "GroupBasicInfo" : {
        "properties" : {
          "name" : {
            "example" : "Everyone",
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "members" : {
            "description" : "members of the group.",
            "items" : {
              "example" : "Owner",
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "ImportJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/ImportJob_allOf"
        } ],
        "description" : "The job 'ImportJob' is used to import the given file of type '.export' on the specified node. Already existing objects will be overwritten.\n"
      },
      "ImportUsersAndGroupsJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/ImportUsersAndGroupsJob_allOf"
        } ],
        "description" : "The job 'ImportUsersAndGroupsJob' is used to import the users and groups definiitions, stored in the file , into the project.\n"
      },
      "InstalledDeviceBasics" : {
        "example" : {
          "deviceType" : 68,
          "additionalFiles" : [ {
            "path" : "C:\\ProgramData\\Rexroth\\ctrlX WORKS\\1\\Studio\\Devices\\64\\1001 0101\\1.2.0\\BoschRexroth_ControlX_EtherCAT_Master_Diag-1.2.0.0.xml",
            "key" : "Common.File.XML.NativeDescription"
          }, {
            "path" : "C:\\ProgramData\\Rexroth\\ctrlX WORKS\\1\\Studio\\Devices\\64\\1001 0101\\1.2.0\\BoschRexroth_ControlX_EtherCAT_Master_Diag-1.2.0.0.xml",
            "key" : "Common.File.XML.NativeDescription"
          } ],
          "vendor" : "Bosch Rexroth AG",
          "name" : "IndraDrive MPC08 (1 CCD Master +5 CCD Slaves)",
          "description" : "description",
          "categories" : [ "65", "65" ],
          "id" : "24_00000100__242C04",
          "version" : "Revision=16#00000004"
        },
        "properties" : {
          "name" : {
            "description" : "name of the installed device .",
            "example" : "IndraDrive MPC08 (1 CCD Master +5 CCD Slaves)",
            "readOnly" : true,
            "type" : "string"
          },
          "version" : {
            "description" : "version of the installed device .",
            "example" : "Revision=16#00000004",
            "readOnly" : true,
            "type" : "string"
          },
          "vendor" : {
            "description" : "vendor of the device .",
            "example" : "Bosch Rexroth AG",
            "readOnly" : true,
            "type" : "string"
          },
          "description" : {
            "description" : "description of the device .",
            "readOnly" : true,
            "type" : "string"
          },
          "categories" : {
            "items" : {
              "example" : "65",
              "type" : "string"
            },
            "type" : "array"
          },
          "deviceType" : {
            "example" : 68,
            "type" : "integer"
          },
          "id" : {
            "example" : "24_00000100__242C04",
            "type" : "string"
          },
          "additionalFiles" : {
            "items" : {
              "$ref" : "#/components/schemas/InstalledDeviceBasics_additionalFiles"
            },
            "type" : "array"
          }
        },
        "required" : [ "additionalFiles", "categories", "description", "deviceType", "id", "name", "vendor", "version" ],
        "type" : "object"
      },
      "Job" : {
        "discriminator" : {
          "propertyName" : "jobType"
        },
        "example" : {
          "jobResultInfo" : "jobResultInfo",
          "progress" : 10,
          "id" : "123",
          "state" : "Running",
          "jobType" : "jobType"
        },
        "properties" : {
          "jobType" : {
            "description" : "one of available jobTypes (e.g. ProjectJob, ExportEthercatConfigJob, MoveElementsJob, FindElementsJob, NewProjectJob, UserManagementLogInJob, UserManagementLogOutJob, ExportUsersAndGroupsJob, ImportUsersAndGroupsJob, DeviceUserLogoutJob, DeviceUserLoginJob, TransferFieldbusConfigJob, ExportJob, ImportJob, CommunicationSettingsJob, DeviceRepositoryJob, ScanAndMergeDevicesJob )",
            "type" : "string"
          },
          "id" : {
            "description" : "Id of a job",
            "example" : "123",
            "readOnly" : true,
            "type" : "string"
          },
          "state" : {
            "enum" : [ "Pending", "Failed", "Done", "Running" ],
            "example" : "Running",
            "readOnly" : true,
            "type" : "string"
          },
          "progress" : {
            "description" : "Progress of the task in percent",
            "example" : 10,
            "maximum" : 100,
            "minimum" : 0,
            "readOnly" : true,
            "type" : "integer"
          },
          "jobResultInfo" : {
            "type" : "string"
          }
        },
        "required" : [ "jobType" ],
        "type" : "object"
      },
      "JobList" : {
        "example" : {
          "jobs" : [ {
            "jobResultInfo" : "jobResultInfo",
            "progress" : 10,
            "id" : "123",
            "state" : "Running",
            "jobType" : "jobType"
          }, {
            "jobResultInfo" : "jobResultInfo",
            "progress" : 10,
            "id" : "123",
            "state" : "Running",
            "jobType" : "jobType"
          } ]
        },
        "properties" : {
          "jobs" : {
            "description" : "a list of jobs",
            "items" : {
              "$ref" : "#/components/schemas/Job"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "Jobs" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/ProjectJob"
        }, {
          "$ref" : "#/components/schemas/ExportEthercatConfigJob"
        }, {
          "$ref" : "#/components/schemas/MoveElementsJob"
        }, {
          "$ref" : "#/components/schemas/FindElementsJob"
        }, {
          "$ref" : "#/components/schemas/NewProjectJob"
        }, {
          "$ref" : "#/components/schemas/ExportJob"
        }, {
          "$ref" : "#/components/schemas/ExportUsersAndGroupsJob"
        }, {
          "$ref" : "#/components/schemas/ImportJob"
        }, {
          "$ref" : "#/components/schemas/ImportUsersAndGroupsJob"
        }, {
          "$ref" : "#/components/schemas/UserManagementLogOutJob"
        }, {
          "$ref" : "#/components/schemas/UserManagementLogInJob"
        }, {
          "$ref" : "#/components/schemas/DeviceUserLoginJob"
        }, {
          "$ref" : "#/components/schemas/DeviceUserLogoutJob"
        }, {
          "$ref" : "#/components/schemas/TransferFieldbusConfigJob"
        }, {
          "$ref" : "#/components/schemas/CommunicationSettingsJob"
        }, {
          "$ref" : "#/components/schemas/DeviceRepositoryJob"
        }, {
          "$ref" : "#/components/schemas/ScanAndMergeDevicesJob"
        } ]
      },
      "ListItem" : {
        "description" : "General information of elements.",
        "example" : {
          "name" : "name",
          "elementType" : "elementType",
          "url" : "url"
        },
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "elementType" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          }
        },
        "readOnly" : true,
        "type" : "object"
      },
      "LogoutAfterTimeOfInactivity" : {
        "properties" : {
          "checked" : {
            "type" : "boolean"
          },
          "value" : {
            "description" : "Value must be between 1 to 180.",
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "MaximumAuthenticationTrials" : {
        "properties" : {
          "checked" : {
            "type" : "boolean"
          },
          "value" : {
            "description" : "Value must be between 1 to 10.",
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "MoveElementsJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/MoveElementsJob_allOf"
        } ],
        "description" : "The job 'MoveElementsJob' is used to shift the element from one node to another including all the submodules.\n"
      },
      "NewProjectJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/NewProjectJob_allOf"
        } ],
        "description" : "The job 'NewProjectJob' is used to create a new project.\n"
      },
      "Path" : {
        "description" : "For example path to a library file or path to save a project.\n",
        "properties" : {
          "path" : {
            "example" : "C:\\User\\Libraries\\MyLibrary.complied-library or C:\\User\\ABC_Test.project",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "PousElements" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UsersAndGroupsEditor"
        }, {
          "$ref" : "#/components/schemas/ProjectSettings"
        } ]
      },
      "PousTopLevel" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        } ],
        "description" : "Top level **POUs** view in IO Engineering."
      },
      "Product" : {
        "description" : "information regarding product",
        "example" : {
          "versionText" : "WRK-V-RC"
        },
        "properties" : {
          "versionText" : {
            "example" : "WRK-V-RC",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Project" : {
        "description" : "Includes everything for the production of a control program.",
        "example" : {
          "profileName" : "ctrlX IO 1.15.0",
          "path" : "C:\\User\\Admin\\IOProjects\\ABC_Test.project",
          "lastModifiedTime" : "2019-11-11T11:37:03.2873026+01:00",
          "lastAccessTime" : "2019-11-11T11:37:03.2952358+01:00",
          "creationTime" : "2019-10-29T09:32:36.1187391+01:00",
          "name" : "ABC_Test.project",
          "compilerVersion" : "3.5.15.50",
          "visualisationProfile" : "Not supported",
          "elementList" : [ {
            "name" : "name",
            "elementType" : "elementType",
            "url" : "url"
          }, {
            "name" : "name",
            "elementType" : "elementType",
            "url" : "url"
          } ]
        },
        "properties" : {
          "name" : {
            "example" : "ABC_Test.project",
            "type" : "string"
          },
          "path" : {
            "example" : "C:\\User\\Admin\\IOProjects\\ABC_Test.project",
            "type" : "string"
          },
          "creationTime" : {
            "example" : "2019-10-29T09:32:36.1187391+01:00",
            "type" : "string"
          },
          "lastModifiedTime" : {
            "example" : "2019-11-11T11:37:03.2873026+01:00",
            "type" : "string"
          },
          "lastAccessTime" : {
            "example" : "2019-11-11T11:37:03.2952358+01:00",
            "type" : "string"
          },
          "profileName" : {
            "example" : "ctrlX IO 1.15.0",
            "type" : "string"
          },
          "compilerVersion" : {
            "example" : "3.5.15.50",
            "type" : "string"
          },
          "visualisationProfile" : {
            "example" : "Not supported",
            "type" : "string"
          },
          "elementList" : {
            "items" : {
              "$ref" : "#/components/schemas/ListItem"
            },
            "readOnly" : true,
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "ProjectJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/ProjectJob_allOf"
        } ],
        "description" : "- 'Open' opens project as current project\n- 'Close' closes current project without saving. Project files wiill be deleted, on close of new project that has not been saved.\n- 'Save' saves the current project. If a 'path' is contained, 'save as' is performed\n",
        "type" : "object"
      },
      "ProjectSettings" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/ProjectSettings_allOf"
        } ],
        "description" : "ProjectSettings contains a set of options to configure project.\nElement with fixed name. It's name in IO Engineering is language dependent. Node 'Project Settings' is added by default when a project is created. This node cannot be deleted or added again.\n"
      },
      "ScanAndMergeDevicesJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/ScanAndMergeDevicesJob_allOf"
        } ],
        "description" : "This job is used to scan and merge devices to Project.\n"
      },
      "TransferFieldbusConfigJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/TransferFieldbusConfigJob_allOf"
        } ],
        "description" : "The job transfers the fieldbus configuration to the controller."
      },
      "User" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "type" : "object"
        } ],
        "description" : "Displays the users and their memberships in groups",
        "example" : {
          "password" : "password",
          "oldPassword" : "oldPassword",
          "fullName" : "fullName",
          "description" : "description",
          "active" : true,
          "confirmPassword" : "confirmPassword",
          "memberships" : [ "memberships", "memberships" ]
        },
        "properties" : {
          "fullName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "active" : {
            "example" : true,
            "type" : "boolean"
          },
          "oldPassword" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "confirmPassword" : {
            "type" : "string"
          },
          "memberships" : {
            "description" : "List of all user groups that you have defined in addition to the group “Everyone” (to which each new user automatically belongs).",
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }
      },
      "UserBasicInfo" : {
        "properties" : {
          "name" : {
            "description" : "Name of the user.",
            "example" : "Owner",
            "type" : "string"
          },
          "fullName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "active" : {
            "example" : true,
            "type" : "boolean"
          },
          "memberships" : {
            "description" : "List of all user groups that you have defined in addition to the group “Everyone” (to which each new user automatically belongs).",
            "items" : {
              "example" : "Everyone",
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "UserManagementLogInJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "$ref" : "#/components/schemas/UserManagementLogInJob_allOf"
        } ],
        "description" : "The job 'UserManagementLogInJob' is used to log in defined user for the opened project. User cannot login if 'logoutAfterTimeOfInactivity' is True. So internally while performing the login, it will be set to false.\n"
      },
      "UserManagementLogOutJob" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Job"
        }, {
          "type" : "object"
        } ],
        "description" : "The job 'UserManagementLogOutJob' is used to logout from the current project.\n"
      },
      "UsersAndGroupsEditor" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseElement"
        }, {
          "$ref" : "#/components/schemas/UsersAndGroupsEditor_allOf"
        } ],
        "description" : "This editor is for the configuration of the user management for the current project. This is the global settings, which can be configured from node 'ProjectSettings'.\nElement with fixed name. It's name in IO Engineering is language dependent.\n"
      },
      "UsersAndGroupsSettings" : {
        "properties" : {
          "maximumAuthenticationTrials" : {
            "$ref" : "#/components/schemas/MaximumAuthenticationTrials"
          },
          "logoutAfterTimeOfInactivity" : {
            "$ref" : "#/components/schemas/LogoutAfterTimeOfInactivity"
          },
          "enableHashFormatPassword" : {
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "Problem" : {
        "description" : "This document defines a \"problem detail\" as a way  to carry machine-readable details of errors in a  HTTP response to avoid the need to define new error  response formats for HTTP APIs.\n",
        "properties" : {
          "type" : {
            "default" : "about:blank",
            "description" : "A URI reference [RFC3986] that identifies the problem type. \nThis specification encourages that, when dereferenced, \nit provide human-readable documentation for the problem type \n(e.g., using HTML [W3C.REC-html5-20141028]). When this member \nis not present, its value is assumed to be \"about:blank\".\n",
            "example" : "https://example.com/probs/out-of-credit",
            "format" : "uri",
            "type" : "string"
          },
          "title" : {
            "description" : "A short, human-readable summary of the problem type. \nIt SHOULD NOT change from occurrence to occurrence of the problem, \nexcept for purposes of localization (e.g., using proactive content \nnegotiation; see [RFC7231], Section 3.4).\n",
            "example" : "You do not have enough credit.",
            "type" : "string"
          },
          "status" : {
            "description" : "The HTTP status code ([RFC7231], Section 6) generated by the \norigin server for this occurrence of the problem.\n",
            "example" : 403,
            "format" : "int32",
            "type" : "integer"
          },
          "detail" : {
            "description" : "A human-readable explanation specific to this occurrence of the problem.\n",
            "example" : "Your current balance is 30, but that costs 50.",
            "type" : "string"
          },
          "instance" : {
            "description" : "A URI reference that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n",
            "example" : "/account/12345/msgs/abc",
            "type" : "string"
          },
          "code" : {
            "deprecated" : true,
            "description" : "An error code issued by the system that caused the original problem.\nThis code can be used to track down the root cause of the error.\n",
            "example" : "F360001",
            "type" : "string"
          },
          "mainDiagnosisCode" : {
            "description" : "The main diagnosis code is issued by the system that caused the problem.\nThis code can be used to track down the root cause and source of the error.\nIt can be used to search in the documentation for a solution.\nIt SHOULD NOT change from occurrence to occurrence of the same problem.\n",
            "example" : "080F0100",
            "type" : "string"
          },
          "detailedDiagnosisCode" : {
            "description" : "The detailed diagnosis code issued by the system that caused the problem.\nThis code can be used to track down the detailed cause and source of the error.\nIt can be used to search in the documentation for a solution.\nThe detailed diagnosis code gives additional information about the cause of the error.\nIt SHOULD NOT change from occurrence to occurrence of the same problem.\n",
            "example" : "00666001",
            "type" : "string"
          },
          "dynamicDescription" : {
            "description" : "A dynamic description gives detailed information about the occurrence of a problem.\nIt can change between different occurrences of the same error.\n",
            "example" : "value = -4.5",
            "type" : "string"
          },
          "severity" : {
            "description" : " Severity of a problem as defined RFC5424 of the Syslog standard, see https://tools.ietf.org/html/rfc5424",
            "enum" : [ "Emergency", "Alert", "Critical", "Error", "Warning", "Notice", "Informational", "Debug" ],
            "example" : "Error",
            "type" : "string"
          },
          "links" : {
            "description" : "Collection of links to fix the problem. E.g. links to online user manual,\nto an online community (using tags) or a developer chat (e.g. Slack).\n",
            "items" : {
              "example" : "https://stackoverflow.com/questions/tagged/boschrexroth+controlx+f360001",
              "format" : "uri",
              "type" : "string"
            },
            "type" : "array"
          },
          "moreInfo" : {
            "additionalProperties" : true,
            "example" : {
              "trace" : "ExampleClass.cpp#452 Null pointer exception",
              "class" : "ExampleClass"
            },
            "type" : "object"
          }
        },
        "required" : [ "title", "type" ],
        "type" : "object",
        "x-version" : "1.0.0"
      },
      "CommunicationSettingsJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "description" : "ctrlX device node for which job needs to be executed.",
            "example" : "/devices/Device",
            "type" : "string"
          },
          "ipAddress" : {
            "description" : "IpAddress of the controller.",
            "example" : "10.110.245.199",
            "type" : "string"
          }
        }
      },
      "CommunicationSettingsJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/CommunicationSettingsJob_allOf_jobParameters"
          }
        }
      },
      "Device_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "isOnline" : {
            "description" : "isOnline will be **true**, if the device is online. Otherwise it will be **false**.",
            "example" : false,
            "readOnly" : true,
            "type" : "boolean"
          },
          "disable" : {
            "description" : "Disable or Enable the device. If set to **true**, device will be disabled. Should be used with **PATCH** request only.",
            "example" : false,
            "type" : "boolean"
          },
          "deviceInfo" : {
            "$ref" : "#/components/schemas/DeviceInfo"
          },
          "ethercatSlaveInfo" : {
            "$ref" : "#/components/schemas/EthercatSlaveInfo"
          },
          "ioMapping" : {
            "items" : {
              "$ref" : "#/components/schemas/ChannelInfo"
            },
            "type" : "array"
          }
        }
      },
      "DevicePlug_allOf" : {
        "properties" : {
          "deviceFunction" : {
            "example" : "plug",
            "type" : "string"
          },
          "deviceType" : {
            "example" : 68,
            "type" : "integer"
          },
          "deviceId" : {
            "example" : "10000E8_00002308__r/w head, 16 bytes I/O",
            "type" : "string"
          },
          "deviceVersion" : {
            "example" : "0",
            "type" : "string"
          },
          "deviceName" : {
            "example" : "RFID_Ch_2_1",
            "type" : "string"
          }
        }
      },
      "DeviceRepositoryJob_allOf_jobParameters" : {
        "properties" : {
          "action" : {
            "example" : "SaveDevice",
            "type" : "string"
          }
        }
      },
      "DeviceRepositoryJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/DeviceRepositoryJob_allOf_jobParameters"
          }
        }
      },
      "DisableDevice_allOf" : {
        "properties" : {
          "disable" : {
            "example" : false,
            "type" : "boolean"
          }
        }
      },
      "DeviceUserLoginJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "description" : "ctrlX device node for which job needs to be executed.",
            "example" : "/devices/Device",
            "type" : "string"
          },
          "username" : {
            "example" : "boschrexroth",
            "type" : "string"
          },
          "password" : {
            "example" : "boschrexroth",
            "type" : "string"
          }
        }
      },
      "DeviceUserLoginJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/DeviceUserLoginJob_allOf_jobParameters"
          }
        }
      },
      "DeviceUserLogoutJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "description" : "ctrlX device node for which job needs to be executed.",
            "example" : "/devices/Device",
            "type" : "string"
          }
        }
      },
      "DeviceUserLogoutJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/DeviceUserLogoutJob_allOf_jobParameters"
          }
        }
      },
      "ExportJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "description" : "node and its child nodes which needs to be exported",
            "example" : "/devices/ctrlX_CORE_IO/ethercatmaster",
            "type" : "string"
          },
          "filePath" : {
            "description" : "path where export file needs to be saved",
            "example" : "X:\\ctrlX\\Projects\\ImportExport",
            "type" : "string"
          },
          "fileName" : {
            "description" : "name of the file (with or without extension). If property 'oneFilePerSubtree' is true, file name is ignored",
            "example" : "ethercatmaster or ethercatmaster.export",
            "type" : "string"
          },
          "oneFilePerSubtree" : {
            "description" : "if true, one file per subtree is generated",
            "example" : false,
            "type" : "boolean"
          }
        }
      },
      "ExportJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/ExportJob_allOf_jobParameters"
          }
        }
      },
      "ExportEthercatConfigJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "description" : "ethercat node which needs to be exported",
            "example" : "/devices/Device/ethercatmaster",
            "type" : "string"
          },
          "filePath" : {
            "description" : "path where file needs to be saved",
            "example" : "X:\\ctrlX\\IOProjects\\IOOpenExport",
            "type" : "string"
          },
          "fileName" : {
            "description" : "name of the file.xml and ini file extensions are supported.",
            "example" : "ethercat.xml",
            "type" : "string"
          }
        }
      },
      "ExportEthercatConfigJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/ExportEthercatConfigJob_allOf_jobParameters"
          }
        }
      },
      "ExportUsersAndGroupsJob_allOf_jobParameters" : {
        "properties" : {
          "filePath" : {
            "description" : "path where *.users xml file needs to be saved",
            "example" : "X:\\ctrlX\\IOProjects",
            "type" : "string"
          },
          "fileName" : {
            "description" : "name of the file (with or without extension).",
            "example" : "usersAndGroups or usersAndGroups.users",
            "type" : "string"
          }
        }
      },
      "ExportUsersAndGroupsJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/ExportUsersAndGroupsJob_allOf_jobParameters"
          }
        }
      },
      "FindElementsJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "description" : "Path of the node from where the search has to begin.",
            "example" : "/devices/Device/IO Logic/Application",
            "type" : "string"
          },
          "findText" : {
            "description" : "Text to be searched.",
            "example" : "folder",
            "type" : "string"
          },
          "findId" : {
            "description" : "Id to be searched.",
            "example" : "be0458db-09f5-43c7-8bbf-0347b8f11765",
            "type" : "string"
          },
          "matchCase" : {
            "description" : "Finds all occurrences with the exact combination of uppercase and lowercase letters specified in the findText. Default value is false.",
            "example" : true,
            "type" : "boolean"
          },
          "matchWholeWord" : {
            "description" : "Searches for the complete word. Default value is false.",
            "example" : true,
            "type" : "boolean"
          },
          "searchOptions" : {
            "description" : "Specifies the search range.",
            "enum" : [ "NodeAndSubNodes" ],
            "type" : "string"
          },
          "matchedNodeUrls" : {
            "description" : "Lists the path of all the nodes, which matches the findId and findText.",
            "example" : [ "devices/Device/IO Logic/Application/folder1" ],
            "items" : {
              "type" : "string"
            },
            "readOnly" : true,
            "type" : "array"
          }
        }
      },
      "FindElementsJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/FindElementsJob_allOf_jobParameters"
          }
        }
      },
      "Group_allOf" : {
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "members" : {
            "description" : "members of the group.",
            "items" : {
              "example" : "Owner",
              "type" : "string"
            },
            "type" : "array"
          }
        }
      },
      "ImportJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "description" : "node on which '.export' file needs to be imported",
            "example" : "/devices/ctrlX_CORE_IO",
            "type" : "string"
          },
          "filePath" : {
            "description" : "path where '.export' file exists",
            "example" : "X:\\ctrlX\\Projects\\ExportImport",
            "type" : "string"
          },
          "fileName" : {
            "description" : "name of the file (with or without extension) that needs to be imported.",
            "example" : "ethercatmaster or ethercatmaster.export",
            "type" : "string"
          }
        }
      },
      "ImportJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/ImportJob_allOf_jobParameters"
          }
        }
      },
      "ImportUsersAndGroupsJob_allOf_jobParameters" : {
        "properties" : {
          "filePath" : {
            "description" : "path where xml file exists",
            "example" : "X:\\ctrlX\\IOProjects",
            "type" : "string"
          },
          "fileName" : {
            "description" : "name of the file (with or without extension .users) that needs to be imported.",
            "example" : "usersAndGroups or usersAndGroups.users",
            "type" : "string"
          }
        }
      },
      "ImportUsersAndGroupsJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/ImportUsersAndGroupsJob_allOf_jobParameters"
          }
        }
      },
      "InstalledDeviceBasics_additionalFiles" : {
        "example" : {
          "path" : "C:\\ProgramData\\Rexroth\\ctrlX WORKS\\1\\Studio\\Devices\\64\\1001 0101\\1.2.0\\BoschRexroth_ControlX_EtherCAT_Master_Diag-1.2.0.0.xml",
          "key" : "Common.File.XML.NativeDescription"
        },
        "properties" : {
          "key" : {
            "example" : "Common.File.XML.NativeDescription",
            "type" : "string"
          },
          "path" : {
            "example" : "C:\\ProgramData\\Rexroth\\ctrlX WORKS\\1\\Studio\\Devices\\64\\1001 0101\\1.2.0\\BoschRexroth_ControlX_EtherCAT_Master_Diag-1.2.0.0.xml",
            "type" : "string"
          }
        }
      },
      "MoveElementsJob_allOf_jobParameters" : {
        "properties" : {
          "sourceNodeUrl" : {
            "description" : "Source location of the node which has to be shifted.",
            "example" : "/devices/Device/ethercatmaster/ctrlX_DRIVE_Powersupply_SoE_1",
            "type" : "string"
          },
          "destinationNodeUrl" : {
            "description" : "Destination location to which the node has to be shifted.",
            "example" : "/devices/ctrlX_CORE_IO/ethercatmaster",
            "type" : "string"
          },
          "insertPosition" : {
            "description" : "- Position where the sourceNode has to be inserted.\n- If the value is not specified then default value -1 will be set.\n- If the value is -1 or out of index node will be inserted at the last position.\n- If the value is 0 then it will be inserted at the begining.\n- If the nodes are sorted in alphabetical order, then insertion will be based on the node name.\n",
            "example" : 2,
            "type" : "integer"
          }
        }
      },
      "MoveElementsJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/MoveElementsJob_allOf_jobParameters"
          }
        }
      },
      "NewProjectJob_allOf_jobParameters" : {
        "properties" : {
          "filePath" : {
            "description" : "path where the created project need to be saved.",
            "example" : "D:\\test",
            "type" : "string"
          },
          "fileName" : {
            "description" : "name of the project.",
            "example" : "ioDemo",
            "type" : "string"
          },
          "template" : {
            "description" : "Depending on the template, user can obtain a project that is automatically equipped with a certain range of objects.",
            "enum" : [ "EmptyProject", "ctrlXCOREIO" ],
            "type" : "string"
          }
        }
      },
      "NewProjectJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/NewProjectJob_allOf_jobParameters"
          }
        }
      },
      "ProjectJob_allOf_jobParameters" : {
        "properties" : {
          "action" : {
            "enum" : [ "Open", "Save", "Close" ],
            "type" : "string"
          },
          "path" : {
            "example" : "C:\\User\\Libraries\\MyLibrary.complied-library or C:\\User\\ABC_Test.project",
            "type" : "string"
          },
          "keepProjectVersion" : {
            "description" : "Default value is false. If false, Project will be converted to latest version and opened. If true, project will not be opened.",
            "type" : "boolean"
          }
        }
      },
      "ProjectJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/ProjectJob_allOf_jobParameters"
          }
        }
      },
      "ProjectSettings_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "displayName" : {
            "description" : "Displayed name in the project",
            "example" : "In english 'Project Settings', in German 'Projekteinstellungen'",
            "readOnly" : true,
            "type" : "string"
          }
        }
      },
      "ScanAndMergeDevicesJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "description" : "node on which scan is performed.",
            "example" : "/devices/ctrlX_CORE_IO/ethercatmaster",
            "type" : "string"
          }
        }
      },
      "ScanAndMergeDevicesJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/ScanAndMergeDevicesJob_allOf_jobParameters"
          }
        }
      },
      "TransferFieldbusConfigJob_allOf_jobParameters" : {
        "properties" : {
          "nodeUrl" : {
            "description" : "Path of the node whose configuration has to be transfered.",
            "example" : "/devices/Device/ethercatmaster",
            "type" : "string"
          },
          "allowSwitchState" : {
            "description" : "Switch the system state to set up or the EtherCAT state to init, if necessary. The default value is true.",
            "example" : true,
            "type" : "boolean"
          }
        }
      },
      "TransferFieldbusConfigJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/TransferFieldbusConfigJob_allOf_jobParameters"
          }
        }
      },
      "UserManagementLogInJob_allOf_jobParameters" : {
        "properties" : {
          "userName" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        }
      },
      "UserManagementLogInJob_allOf" : {
        "properties" : {
          "jobParameters" : {
            "$ref" : "#/components/schemas/UserManagementLogInJob_allOf_jobParameters"
          }
        }
      },
      "UsersAndGroupsEditor_allOf" : {
        "properties" : {
          "elementProperties" : {
            "$ref" : "#/components/schemas/ElementProperties"
          },
          "users" : {
            "description" : "Displays the users and their memberships in groups.",
            "items" : {
              "$ref" : "#/components/schemas/UserBasicInfo"
            },
            "readOnly" : true,
            "type" : "array"
          },
          "groups" : {
            "description" : "Displays the groups and their members. A group can also be a member of a group.",
            "items" : {
              "$ref" : "#/components/schemas/GroupBasicInfo"
            },
            "readOnly" : true,
            "type" : "array"
          },
          "settings" : {
            "$ref" : "#/components/schemas/UsersAndGroupsSettings"
          }
        }
      }
    }
  }
}